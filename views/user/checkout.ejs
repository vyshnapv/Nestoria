<%- include('../layoutsUser/userheader') %>
<style>

.cart-summary-box {
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 8px;
}

.checkout-title {
    font-size: 1.3em;
    margin-bottom: 15px;
    text-align: center;
}

.cart-items-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.cart-item-card {
    display: flex;
    align-items: center;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.product-media img {
    max-width: 50px;
    height: auto;
    margin-right: 15px;
    border-radius: 4px;
}

.product-details {
    display: flex;
    flex-direction: column;
    gap: 3px;
}

.price, .quantity, .total {
    font-size: 0.85em;
    color: #555;
    margin: 0;
}

.address-list {
    margin-top: 20px;
    display: none; 
}

.address-item {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 6px;
    margin-bottom: 10px;
    background-color: #f9f9f9;
    width: 100%;
    max-width: 250px;
    font-size: 0.9em;
    position: relative;
    cursor: pointer;
    transition: border-color 0.3s;
    display: inline-block;
    vertical-align: top;
}

.address-item.selected {
    border-color: #007bff;
    background-color: #e6f0ff;
}
.radio-button {
    position: absolute;
    top: 15px;
    right: 15px;
    width: 20px;
    height: 20px;
    border: 2px solid #ccc;
    border-radius: 50%;
    transition: all 0.3s ease;
}
.radio-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: transparent;
    transition: all 0.3s ease;
}
.address-item.selected .radio-button {
    border-color: #007bff;
}

.address-item.selected .radio-button::after {
    background-color: #007bff;
}
.address-content {
    display: block;
    padding-right: 40px;
}

.address-content h5 {
    margin-bottom: 10px;
    color: #333;
}

.address-content p {
    margin: 5px 0;
    color: #666;
}
.select-icon {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid #ddd;
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, border-color 0.3s;
}
.select-icon.selected {
    background-color: #007bff;
    border-color: #007bff;
}
.address-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
}

#addAddressForm {
    display: none;
    margin-top: 20px;
    padding: 20px;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    font-weight: bold;
    color: #555;
    display: block;
    margin-bottom: 5px;
}

.form-control {
    width: 100%;
    padding: 10px;
    font-size: 14px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.error {
    border-color: #dc3545;
}

.error-message {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    display: none;
}

.btn-primary, .btn-secondary {
    padding: 10px 20px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
    margin-left: 10px;
}

.btn-primary:hover {
    background-color: #0056b3;
}

.btn-secondary:hover {
    background-color: #545b62;
}

.checkout-container {
    position: relative;
    display: flex;
    gap: 30px;
}

.main-content {
    flex: 1;
}

.sidebar {
    width: 300px;
    position: sticky;
    top: 20px;
    height: fit-content;
}

#addAddressForm {
    display: none;
    margin-top: 20px;
    padding: 20px;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    max-width: 100%;
}

.payment-method {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
}

.payment-method-title {
    font-size: 1.1em;
    font-weight: 600;
    color: #333;
    margin-bottom: 15px;
}

.payment-option {
    display: flex;
    align-items: center;
    padding: 12px;
    border: 1px solid #e1e1e1;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.payment-option:hover {
    background-color: #f8f9fa;
    border-color: #007bff;
}

.payment-option input[type="radio"] {
    margin-right: 12px;
    width: 18px;
    height: 18px;
    cursor: pointer;
}

.payment-option label {
    font-size: 1em;
    color: #444;
    margin: 0;
    cursor: pointer;
    flex: 1;
}

.payment-option.selected {
    background-color: #e6f0ff;
    border-color: #007bff;
}

/* Updated Button Styles */
#placeOrderButton {
    width: 100%;
    padding: 15px;
    font-size: 1.1em;
    font-weight: 600;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    transition: all 0.3s ease;
}

#placeOrderButton:hover {
    background-color: #0056b3;
    transform: translateY(-1px);
}

#placeOrderButton:active {
    transform: translateY(0);
}

.coupons-container {
    margin: 20px 0;
    padding: 15px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.coupons-title {
    font-size: 1.1em;
    margin-bottom: 15px;
    color: #333;
    padding-left: 10px;
}

.coupons-scroll {
    max-height: 400px;
    overflow-y: auto;
    padding: 5px;
}

.coupon-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border: 1px dashed #007bff;
    border-radius: 6px;
    padding: 10px;
    margin-bottom: 10px;
    background-color: #f8f9fa;
    position: relative;
    height: 80px;
}
.coupon-left {
    display: flex;
    align-items: center;
    gap: 15px;
    flex: 1;
}
.coupon-info {
    display: flex;
    flex-direction: column;
    gap: 3px;
}


.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.coupon-code {
    font-weight: bold;
    color: #007bff;
    font-size: 0.9em;
}

.discount-percent {
    background-color: #28a745;
    color: white;
    padding: 3px 6px;
    border-radius: 4px;
    font-size: 0.8em;
    white-space: nowrap;
}

.coupon-name {
    font-weight: 600;
    font-size: 0.85em;
    margin: 0;
}

.coupon-details {
    display: flex;
    gap: 10px;
    font-size: 0.75em;
    color: #666;
}

.coupon-details p {
    margin:0;
}

.coupon-right {
    display: flex;
    align-items: center;
    gap: 10px;
}
.coupon-description {
    font-size: 0.85em;
    color: #555;
    margin-bottom: 10px;
}

.apply-coupon-btn {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 0.8em;
    white-space: nowrap;
}

.apply-coupon-btn:hover {
    background-color: #0056b3;
}

.remove-coupon-container {
    text-align: right;
    margin-top: 8px;
}

.remove-coupon-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8em;
    transition: background-color 0.3s;
}

.remove-coupon-btn:hover {
    background-color: #c82333;
}

.no-coupons {
    text-align: center;
    color: #666;
    padding: 20px;
}

.applied-coupon {
    background-color: #e8f4ff;
    padding: 10px;
    border-radius: 6px;
    margin: 10px 0;
    border: 1px solid #b8daff;
    font-size: 0.9em;
}

.applied-coupon-info {
    color: #004085;
    font-weight: 500;
}

.discount-amount {
    font-weight: bold;
    color: #28a745;
}
.summary{
    padding: 2.5rem 1rem 3rem;
}

.summary-table {
    width: 100%;
    margin-top: 15px;
}

.summary-table tr {
    border-bottom: 1px solid #dee2e6;
}

.summary-table td {
    padding: 10px 0;
}

.summary-table .total-row {
    font-weight: bold;
    font-size: 1.1em;
    border-top: 2px solid #dee2e6;
}

.loading {
    position: relative;
    opacity: 0.7;
    pointer-events: none;
}

.loading::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

.coupon-card.disabled {
    opacity: 0.7;
    pointer-events: none;
}
.coupon-card.disabled::after {
    content: "Remove applied coupon to use this";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 0.9em;
    display: none;
}

.coupon-card.disabled:hover::after {
    display: block;
}
.apply-coupon-btn.disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.apply-coupon-btn.disabled:hover {
    background-color: #cccccc;
}

.price-details {
        margin-top: 5px;
        font-size: 0.9em;
    }
    
    .table-summary td {
        padding: 12px 0;
    }
    
    .table-summary .text-muted {
        margin-top: 4px;
    }
    
    .total-row td {
        padding-top: 20px;
        font-size: 1.1em;
    }
    
    .summary-subtotal td {
        border-top: 1px solid #dee2e6;
        padding-top: 15px;
    }
    
    .discount-info {
        margin-top: 2px;
    }
    
    .table-summary small {
        line-height: 1.4;
    }

    .wallet-info {
    background-color: #f8f9fa;
    padding: 10px 15px;
    border-radius: 5px;
    margin-bottom: 15px;
}

.payment-option input[type="radio"]:disabled + label {
    opacity: 0.6;
    cursor: not-allowed;
}

.text-danger {
    color: #dc3545;
    font-size: 0.875em;
}
</style>

<main class="main">
    <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Checkout<span>Shop</span></h1>
        </div>
    </div>
    
    <nav aria-label="breadcrumb" class="breadcrumb-nav">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
                <li class="breadcrumb-item"><a href="/cart">cart</a></li>
                <li class="breadcrumb-item active" aria-current="page">Checkout</li>
            </ol>
        </div>
    </nav>

    <div class="page-content">
        <div class="checkout">
            <div class="container">
               <div class="checkout-container">
                  <div class="main-content">
                    <div class="coupons-container">
                        <h3 class="coupons-title">Available Coupons</h3>
                        <div class="coupons-scroll">
                            <% const eligibleCoupons = coupons.filter(coupon => subtotal >= coupon.minPrice); %>
                            <% if (eligibleCoupons && eligibleCoupons.length > 0) { %>
                                <% eligibleCoupons.forEach(coupon => { %>
                                    <div class="coupon-card <%= appliedCoupon ? 'disabled' : '' %>"
                                         data-coupon="<%= coupon.couponCode %>">
                                        <div class="coupon-left">
                                            <div class="coupon-info">
                                                <span class="coupon-code"><%= coupon.couponCode %></span>
                                                <span class="coupon-name"><%= coupon.title %></span>
                                                <div class="coupon-details">
                                                    <p>Min: ₹<%= coupon.minPrice.toFixed(2) %></p>
                                                    <p>Max: ₹<%= coupon.maxRedeemAmount.toFixed(2) %></p>
                                                    <p>Expires: <%= new Date(coupon.expiryDate).toLocaleDateString() %></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="coupon-right">
                                            <span class="discount-percent"><%= coupon.percentage %>% OFF</span>
                                            <button class="apply-coupon-btn <%= appliedCoupon ? 'disabled' : '' %>"
                                                    onclick="applyCoupon('<%= coupon.couponCode %>')"
                                                    <%= appliedCoupon ? 'disabled' : '' %>>
                                                <%= appliedCoupon ? 'Coupon Unavailable' : 'Apply Coupon' %>
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p class="no-coupons">No eligible coupons available for your cart value.</p>
                            <% } %>
                        </div>
                        
                        <% if (appliedCoupon) { %>
                        <div class="applied-coupon">
                            <span class="applied-coupon-info">
                                Applied Coupon: <%= appliedCoupon.code %> 
                                (<%= appliedCoupon.appliedDiscount === 'Maximum discount applied' ? 
                                    `Max discount ₹${appliedCoupon.discountAmount}` : 
                                    `${appliedCoupon.percentage}% OFF` %>)
                            </span>
                            <span class="discount-amount">
                                -₹<%= appliedCoupon.discountAmount.toFixed(2) %>
                            </span>
                        </div>
                        <div class="remove-coupon-container">
                            <button class="remove-coupon-btn" onclick="removeCoupon()">Remove Coupon</button>
                        </div>
                        <% } %>
                    </div>
                        <div class="cart-summary-box mb-4">
                            <h2 class="checkout-title">Order Summary</h2>
                            <div class="cart-items-list">
                                <% cart.items.forEach(item => { %>
                                    <% const product = item.product %>
                                    <% const price = product.highestDiscount > 0 ? product.offerPrice : product.regularPrice %>
                                    <% const itemTotal = price * item.quantity %>
                                    <div class="cart-item-card">
                                        <div class="product-media">
                                            <img src="/uploads/<%= product.productImage[0] %>" alt="<%= product.productName %>">
                                        </div>
                                        <div class="product-details">
                                            <p class="price">Product Name: <%= product.productName %></p>
                                            <% if (product.highestDiscount > 0) { %>
                                                <p class="price">Price: ₹<%= product.offerPrice.toFixed(2) %></p>
                                            <% } else { %>
                                                <p class="price">Price: ₹<%= product.regularPrice.toFixed(2) %></p>
                                            <% } %>
                                            <p class="quantity">Quantity: <%= item.quantity %></p>
                                            <p class="total">Total: ₹<%= itemTotal.toFixed(2) %></p>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        </div>

                        <div class="address-buttons"> 
                            <button id="show-addresses-btn" class="btn btn-primary">view Addresses</button>
                            <button id="add-address-btn" class="btn btn-secondary" onclick="toggleForm()">Add Address</button>
                        </div>

                        <div class="col-lg-12 address-list" id="address-list">
                            <h4>Your Addresses</h4>
                            <% if (addresses && addresses.address && addresses.address.length > 0) { %>
                                <% addresses.address.forEach((address, index) => { %>
                                    <div class="address-item <%= index === 0 ? 'selected' : '' %>" 
                                         onclick="selectAddress('<%= index %>')" 
                                         data-index="<%= index %>">
                                        <div class="address-content">
                                            <h5>Address <%= index + 1 %></h5>
                                            <p>Name: <%= address.name %></p>
                                            <p>Phone: <%= address.phone %></p>
                                            <p>District: <%= address.district %></p>
                                            <p>City: <%= address.city %></p>
                                            <p>House: <%= address.house %></p>
                                            <p>State: <%= address.state %></p>
                                            <p>Pincode: <%= address.pincode %></p>
                                            <div class="radio-button"></div>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <p>No addresses found. <a href="/address">Add an Address</a></p>
                            <% } %>
                        </div>
                        
                    <div id="addAddressForm" >
                        <form id="actualAddAddressForm" method="POST" action="/addAddress">
                            <div class="form-group">
                                <label for="name">Name</label>
                                <input type="text" class="form-control" id="name" name="name">
                                <span class="error-message" id="nameError"></span>
                            </div>
                            <div class="form-group">
                                <label for="phone">Phone</label>
                                <input type="number" class="form-control" id="phone" name="phone">
                                <span class="error-message" id="phoneError"></span>
                            </div>
                            <div class="form-group">
                                <label for="district">District</label>
                                <input type="text" class="form-control" id="district" name="district">
                                <span class="error-message" id="districtError"></span>
                            </div>
                            <div class="form-group">
                                <label for="city">City</label>
                                <input type="text" class="form-control" id="city" name="city">
                                <span class="error-message" id="cityError"></span>
                            </div>
                            <div class="form-group">
                                <label for="house">House</label>
                                <input type="text" class="form-control" id="house" name="house">
                                <span class="error-message" id="houseError"></span>
                            </div>
                            <div class="form-group">
                                <label for="state">State</label>
                                <input type="text" class="form-control" id="state" name="state">
                                <span class="error-message" id="stateError"></span>
                            </div>
                            <div class="form-group">
                                <label for="pincode">Pincode</label>
                                <input type="number" class="form-control" id="pincode" name="pincode">
                                <span class="error-message" id="pincodeError"></span>
                            </div>
                            <button type="submit" class="btn btn-primary">Save Address</button>
                            <button type="button" class="btn btn-secondary" onclick="cancelForm()">Cancel</button>
                        </form>
                    </div>
                </div>
                   
                    <aside  class="sidebar">
                        <div class="summary">
                            <h3 class="summary-title">Order Summary</h3>
                            <table class="table table-summary">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% let calculatedSubtotal = 0 %>
                                    <% cart.items.forEach(item => { %>
                                        <% const product = item.product %>
                                        <% const originalPrice = Math.round((product.highestDiscount > 0 ? product.offerPrice : product.regularPrice) * 100) / 100 %>
                                        <% const itemTotal = Math.round(originalPrice * item.quantity * 100) / 100 %>
                                        <% const finalItemPrice = item.couponDiscount ? Math.round(item.couponDiscount.finalPrice) : itemTotal %>
                                        <% calculatedSubtotal += finalItemPrice %>
                                        <tr>
                                            <td>
                                                <%= product.productName %>
                                                <small class="d-block text-muted">
                                                    <% if (item.couponDiscount) { %>
                                                        <div class="price-details">
                                                            <span class="original-price" style="text-decoration: line-through; color: #999;">
                                                                ₹<%= itemTotal %>
                                                            </span>
                                                            <span class="arrow" style="color: #666; margin: 0 5px;">→</span>
                                                            <span class="discounted-price" style="color: #28a745;">
                                                                ₹<%= Math.round(item.couponDiscount.finalPrice) %>
                                                            </span>
                                                            <div class="discount-info" style="font-size: 0.85em; color: #28a745;">
                                                                Coupon savings: ₹<%= Math.round(item.couponDiscount.amount) %>
                                                            </div>
                                                        </div>
                                                    <% } %>
                                                </small>
                                            </td>
                                            <td class="text-right">₹<%= finalItemPrice %></td>
                                        </tr>
                                    <% }) %>
                                    
                                    <tr class="summary-subtotal">
                                        <td>Subtotal:</td>
                                        <td>₹<%= Math.round(calculatedSubtotal) %></td>
                                    </tr> 
                                    <tr>
                                        <td>Shipping Charge:</td>
                                        <td>₹50</td>
                                    </tr>
                                    <tr class="total-row">
                                        <td><strong>Total:</strong></td>
                                        <td><strong>₹<%= Math.round(finalAmount+50) %></strong></td>
                                    </tr>
                                </tbody>
                            </table>

                            <div class="payment-method">
                                <h4 class="payment-method-title">Payment Method</h4>
                                
                                <div class="wallet-info mb-3">
                                    <p class="font-medium">Wallet Balance: ₹<span id="walletBalance"><%= Math.round(walletBalance).toFixed(2) %></span></p>
                                </div>
                                
                                <div class="payment-option">
                                    <input type="radio" name="paymentMethod" value="COD" id="paymentCOD"
                                           <%= (finalAmount + 50) > 1000 ? 'disabled' : '' %>>
                                    <label for="paymentCOD" class="<%= (finalAmount + 50) > 1000 ? 'text-muted' : '' %>">
                                        Cash on Delivery
                                        <% if ((finalAmount + 50) > 1000) { %>
                                            <small class="text-danger d-block">Cash on Delivery is not available for orders above ₹1,000. Please choose another payment method.</small>
                                        <% } %>
                                    </label>
                                </div><br>
                                
                                <div class="payment-option">
                                    <input type="radio" name="paymentMethod" value="Razorpay" id="paymentRazorpay">
                                    <label for="paymentRazorpay">Razorpay</label>
                                </div><br>
                                
                                <div class="payment-option">
                                    <input type="radio" name="paymentMethod" value="Wallet" id="paymentWallet" 
                                        <%= (walletBalance < finalAmount) ? 'disabled' : '' %>>
                                    <label for="paymentWallet" class="<%= (walletBalance < finalAmount) ? 'text-muted' : '' %>">
                                        Wallet Payment 
                                        <% if (walletBalance < finalAmount) { %>
                                            <small class="text-danger">(Insufficient Balance)</small>
                                        <% } %>
                                    </label>
                                </div>
                            </div>
                            
                            <button type="button" id="placeOrderButton" class="btn btn-outline-primary-2 btn-block">Place Order</button>
                        </div>
                    </aside>
                </div>
            </div>
        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 document.addEventListener('DOMContentLoaded', function() {
    const showAddressesBtn = document.getElementById('show-addresses-btn');
    const addressList = document.getElementById('address-list');
    const addAddressBtn = document.getElementById('add-address-btn');

    showAddressesBtn.addEventListener('click', function() {
        if (addressList.style.display === 'none' || !addressList.style.display) {
            addressList.style.display = 'block';
            if (!sessionStorage.getItem('selectedAddress')) {
                const firstAddress = document.querySelector('.address-item');
                if (firstAddress) {
                    selectAddress('0');
                }
            }
        } else {
            addressList.style.display = 'none';
        }
    });

    window.selectAddress = function(index) {
        document.querySelectorAll('.address-item').forEach(item => {
            item.classList.remove('selected');
        });
        const selectedItem = document.querySelector(`.address-item[data-index="${index}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected');
            sessionStorage.setItem('selectedAddress', index);
        }
    };
    const firstAddress = document.querySelector('.address-item');
    if (firstAddress) {
        selectAddress('0');
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const firstAddress = document.querySelector('.address-item');
    if (firstAddress) {
        selectAddress('0');
    }
});
    
function selectAddress(index) {
    document.querySelectorAll('.address-item').forEach(item => {
        item.classList.remove('selected');
    });
    const selectedItem = document.querySelector(`.address-item[data-index="${index}"]`);
    if (selectedItem) {
        selectedItem.classList.add('selected');
        sessionStorage.setItem('selectedAddress', index);
    }
}

    function toggleForm() {
    var form = document.getElementById("addAddressForm");
    form.style.display = form.style.display === "none" ? "block" : "none";
}

function cancelForm() {
    Swal.fire({
        title: 'Are you sure?',
        text: "Your entered data will be discarded!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
    }).then((result) => {
        if (result.isConfirmed) {
            document.getElementById("addAddressForm").style.display = "none";
            document.getElementById("actualAddAddressForm").reset();
            clearErrors();
            Swal.fire(
                'Cancelled!',
                'Form has been reset.',
                'success'
            )
        }
    })
}

function showError(elementId, message) {
    const element = document.getElementById(elementId);
    const errorElement = document.getElementById(elementId + 'Error');
    element.classList.add('error');
    errorElement.style.display = 'block';
    errorElement.textContent = message;
}

function clearErrors() {
    const inputs = document.querySelectorAll('.form-control');
    inputs.forEach(input => {
        input.classList.remove('error');
        const errorElement = document.getElementById(input.id + 'Error');
        if (errorElement) {
            errorElement.style.display = 'none';
            errorElement.textContent = '';
        }
    });
}

function isEmptyOrWhitespace(str) {
    return !str || str.trim().length === 0;
}

document.getElementById("actualAddAddressForm").addEventListener("submit", async function(e) {
    e.preventDefault();
    clearErrors();
    let isValid = true;

    
    const name = document.getElementById("name").value;
    if (isEmptyOrWhitespace(name)) {
        showError("name", "Name cannot be empty");
        isValid = false;
    } else if (!/^[A-Za-z]+(?: [A-Za-z]+)*$/.test(name.trim())) {
        showError("name", "Name should contain only letters with single spaces between words");
        isValid = false;
    } else if (name.trim().length < 3 || name.trim().length > 50) {
        showError("name", "Name should be 3-50 characters long");
        isValid = false;
    }
    
    const phone = document.getElementById("phone").value;
    if (isEmptyOrWhitespace(phone)) {
        showError("phone", "Phone number cannot be empty");
        isValid = false;
    } else if (!/^[6-9]\d{9}$/.test(phone.trim())) {
        showError("phone", "Please enter a valid 10-digit phone number starting with 6-9");
        isValid = false;
    }
 
    const district = document.getElementById("district").value;
    if (isEmptyOrWhitespace(district)) {
        showError("district", "District cannot be empty");
        isValid = false;
    } else if (!/^[A-Za-z]+(?: [A-Za-z]+)*$/.test(district.trim())) {
        showError("district", "District should contain only letters with single spaces between words");
        isValid = false;
    } else if (district.trim().length < 3 || district.trim().length > 30) {
        showError("district", "District should be 3-30 characters long");
        isValid = false;
    }
   
    const city = document.getElementById("city").value;
    if (isEmptyOrWhitespace(city)) {
        showError("city", "City cannot be empty");
        isValid = false;
    } else if (!/^[A-Za-z]+(?: [A-Za-z]+)*$/.test(city.trim())) {
        showError("city", "City should contain only letters with single spaces between words");
        isValid = false;
    } else if (city.trim().length < 3 || city.trim().length > 30) {
        showError("city", "City should be 3-30 characters long");
        isValid = false;
    }

    
    const house = document.getElementById("house").value;
    if (isEmptyOrWhitespace(house)) {
        showError("house", "House/Building details cannot be empty");
        isValid = false;
    } else if (!/^[A-Za-z0-9\s,.-/#]{3,100}$/.test(house.trim())) {
        showError("house", "House/Building details should be 3-100 characters long and can contain letters, numbers, spaces, and common symbols (,.-/#)");
        isValid = false;
    }

    
    const state = document.getElementById("state").value;
    if (isEmptyOrWhitespace(state)) {
        showError("state", "State cannot be empty");
        isValid = false;
    } else if (!/^[A-Za-z]+(?: [A-Za-z]+)*$/.test(state.trim())) {
        showError("state", "State should contain only letters with single spaces between words");
        isValid = false;
    } else if (state.trim().length < 3 || state.trim().length > 30) {
        showError("state", "State should be 3-30 characters long");
        isValid = false;
    }

    
    const pincode = document.getElementById("pincode").value;
    if (isEmptyOrWhitespace(pincode)) {
        showError("pincode", "Pincode cannot be empty");
        isValid = false;
    } else if (!/^\d{6}$/.test(pincode.trim())) {
        showError("pincode", "Please enter a valid 6-digit pincode");
        isValid = false;
    }

    if (isValid) {
        try {
            const formData = new FormData(this);
            const response = await fetch('/addCheckAddress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(Object.fromEntries(formData))
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to add address'
                });
            }
        } catch (error) {
            console.error("Error adding address:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to add address. Please try again.'
            });
        }
    }
});


document.addEventListener('DOMContentLoaded', () => {
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.async = true;
    document.head.appendChild(script);

    const placeOrderButton = document.getElementById("placeOrderButton");
    
    const validateOrder = () => {
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const selectedAddress = document.querySelector('.address-item.selected');
        const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
        const finalAmount = parseFloat('<%= finalAmount %>');

        if (!paymentMethod) {
            throw new Error('Please select a payment method.');
        }

        if (!selectedAddress) {
            throw new Error('Please select an address.');
        }

        if (paymentMethod === 'Wallet' && walletBalance < finalAmount) {
            throw new Error('Insufficient wallet balance.');
        }

        return {
            paymentMethod,
            addressId: selectedAddress.getAttribute('data-index')
        };
    };

    const handleRazorpayPayment = (orderData) => {
        const options = {
            key: orderData.razorpayOrder.key,
            amount: orderData.razorpayOrder.amount,
            currency: 'INR',
            name: 'Your Store Name',
            description: 'Order Payment',
            order_id: orderData.razorpayOrder.id,
            handler: async function(response) {
                try {
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            status: 'success',
                            orderId: orderData.orderId
                        })
                    });

                    if (!verifyResponse.ok) {
                        throw new Error('Payment verification failed');
                    }

                    const verifyResult = await verifyResponse.json();

                    if (verifyResult.success && verifyResult.orderId) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Order placed successfully!',
                            showConfirmButton: false,
                            timer: 2000
                        });
                        window.location.href = `/ordersuccess/${verifyResult.orderId}`;
                    } else {
                        throw new Error(verifyResult.message || 'Payment verification failed');
                    }
                } catch (error) {
                    console.error('Payment verification error:', error);
                    await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            status: 'failed',
                            orderId: orderData.orderId
                        })
                    });

                    await Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'Your payment has failed. Please try again.',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then(() => {
                        window.location.href = '/viewOrders';
                    });
                }
            },
            modal: {
                ondismiss: async function() {
                    await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: orderData.razorpayOrder.id,
                            status: 'failed',
                            orderId: orderData.orderId
                        })
                    });
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Payment Cancelled',
                        text: 'Your payment was cancelled. Please try again.',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then(() => {
                        window.location.href = '/viewOrders';
                    });
                }
            },
            prefill: {
            },
            theme: {
                color: '#007bff'
            },
            retry: {
                enabled: true,
                max_count: 3
            }
        };

        const razorpay = new Razorpay(options);
        razorpay.on('payment.failed', async function(response) {
            console.error('Payment failed:', response.error);
            await fetch('/verify-razorpay-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    razorpay_order_id: response.error.metadata.order_id,
                    status: 'failed',
                    orderId: orderData.orderId
                })
            });

            await Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: response.error.description || 'Your payment has failed. Please try again.',
                confirmButtonText: 'OK',
                allowOutsideClick: false,
                allowEscapeKey: false,
                willClose: () => {
                    window.location.href = '/viewOrders';
                }
            });
        });
        razorpay.open();
    };
    placeOrderButton.addEventListener("click", async () => {
        try {
            const { paymentMethod, addressId } = validateOrder();

            const response = await fetch("/place-order", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ paymentMethod, addressId })
            });

            if (!response.ok) {
                throw new Error('Failed to create order');
            }

            const result = await response.json();

            if (!result.success) {
                throw new Error(result.message || 'Failed to create order');
            }

            if (paymentMethod === 'Razorpay') {
                handleRazorpayPayment(result);
            } else if (paymentMethod === 'Wallet') {
                await Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful!',
                    text: 'Your order has been placed using wallet balance.',
                    showConfirmButton: true,
                    confirmButtonText: 'View Order',
                    confirmButtonColor: '#28a745',
                    timer:3000,
                    timerProgressBar:true
                }).then(() => {
                    window.location.href = `/ordersuccess/${result.orderId}`;
                });
            } else if (paymentMethod === 'COD') {
                await Swal.fire({
                    icon: 'success',
                    title: 'Cash on Delivery',
                    text: 'Your order has been placed successfully. Please pay in cash upon delivery.',
                    showConfirmButton: true,
                    confirmButtonText: 'View Order',
                    confirmButtonColor: '#007bff',
                    timer:3000,
                    timerProgressBar:true
                }).then(() => {
                    window.location.href = `/ordersuccess/${result.orderId}`;
                });
            } else {
                window.location.href = `/ordersuccess/${result.orderId}`;
            }
        } catch (error) {
            console.error("Order placement error:", error);
            Swal.fire({
                icon: 'error',
                title: 'Order Placement Failed',
                text: error.message || 'An error occurred while placing the order'
            });
        }
    });

    document.querySelectorAll('.payment-option').forEach(option => {
        option.addEventListener('click', function() {
            const radio = this.querySelector('input[type="radio"]');
            if (radio) {
                radio.checked = true;
                document.querySelectorAll('.payment-option').forEach(opt => {
                    opt.classList.remove('selected');
                });
                this.classList.add('selected');
            }
        });
    });
});
async function applyCoupon(couponCode) {
    try {
        const button = event.target;
        button.classList.add('loading');
        
        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        });
        
        const result = await response.json();
        
        if (result.success) {
            document.querySelectorAll('.coupon-card').forEach(card => {
                card.classList.add('disabled');
                const btn = card.querySelector('.apply-coupon-btn');
                btn.disabled = true;
                btn.classList.add('disabled');
                btn.textContent = 'Coupon Unavailable';
            });

            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: result.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message
            });
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to apply coupon'
        });
    } finally {
        button.classList.remove('loading');
    }
}

async function removeCoupon() {
    try {
        const response = await fetch('/remove-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            document.querySelectorAll('.coupon-card').forEach(card => {
                card.classList.remove('disabled');
                const btn = card.querySelector('.apply-coupon-btn');
                btn.disabled = false;
                btn.classList.remove('disabled');
                btn.textContent = 'Apply Coupon';
            });

            Swal.fire({
                icon: 'success',
                title: 'Coupon Removed',
                text: result.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message
            });
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to remove coupon'
        });
    }
}


document.addEventListener('DOMContentLoaded', function() {
    const appliedCoupon = document.querySelector('.applied-coupon');
    if (appliedCoupon) {
        document.querySelectorAll('.coupon-card').forEach(card => {
            if (!card.classList.contains('disabled')) {
                card.classList.add('disabled');
                const btn = card.querySelector('.apply-coupon-btn');
                btn.disabled = true;
                btn.classList.add('disabled');
                btn.textContent = 'Coupon Unavailable';
            }
        });
    }
});
</script>

<%- include('../layoutsUser/userfooter') %>  
