<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   .error-message {
       color: red;
   }
   .thumbnails-container {
       display: flex;
       overflow-x: auto;
   }
   .thumbnail {
       margin-right: 10px;
   }
</style>

<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-6">
           <div class="card mb-4">
               <div class="card-body">
                   <form method="post" action="/admin/addproducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                           <div id="productName-error" class="error-message"></div>
                       </div>
                       <div class="mb-4">
                           <label class="form-label">Full Description</label>
                           <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                           <div id="description-error" class="error-message"></div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Regular Price</label>
                                   <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                   <div id="regularPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Sale Price</label>
                                   <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Quantity</label>
                                   <input placeholder="" name="quantity" type="text" class="form-control border">
                                   <div id="quantity-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Color</label>
                                   <input name="color" type="text" class="form-control border">
                                   <div id="color-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-4">
                           <div class="card-body">
                               <div class="row gx-2">
                                   <div class="col-sm-6 mb-3">
                                       <label class="form-label">Category</label>
                                       <select class="form-select border" style="width: 150px;" name="category">
                                        <% for (let i = 0; i < category.length; i++) { %>
                                            <option value="<%= category[i]._id %>">
                                                <%= category[i].name %>
                                            </option>
                                        <% } %>
                                       </select>
                                       <div id="category-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-2">
                           <div class="card-header">
                               <h4>Choose Images</h4>
                           </div>
                           <div class="border row">
                               <div id="addedImagesContainer" class="thumbnails-container"></div>
                           </div>
                           <div class="row">
                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                   <img src="" alt="" id="imgView1">
                                   <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event), viewImage(event, 1)">
                                   <div id="images-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="row">
                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                   <img src="" alt="" id="imgView2">
                                   <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event), viewImage(event, 2)">
                               </div>
                           </div>
                           <div class="row">
                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                   <img src="" alt="" id="imgView3">
                                   <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event), viewImage(event, 3)">
                               </div>
                           </div>
                       </div>
                       <div>
                           <button class="btn btn-md rounded font-sm hover-up" type="submit" onclick="validateAndSubmit()">Publish</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
   <%- include('../layoutsAdmin/adminfooter') %>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
   function validateAndSubmit() {
       if (validateForm()) {
           document.forms[0].submit();
       }
   }

   // Preview images
   function viewImage1(event) {
       document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
   }

   function viewImage2(event) {
       document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
   }

   function viewImage3(event) {
       document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
   }

   // Image crop and resize process
   function viewImage(event, index) {
       let input = event.target;
       let reader = new FileReader();
       reader.onload = function () {
           let dataURL = reader.result;
           let image = document.getElementById("imgView" + index);
           image.src = dataURL;
           let cropper = new Cropper(image, {
               aspectRatio: 1,
               viewMode: 1,
               guides: true,
               background: false,
               autoCropArea: 1,
               zoomable: true
           });

           // Image crop
           let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
           cropperContainer.style.display = "block";

           let saveButton = document.querySelector("#saveButton" + index);
           saveButton.addEventListener("click", async function () {
               let croppedCanvas = cropper.getCroppedCanvas();
               let croppedImage = document.getElementById("croppedImg" + index);
               croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

               let timeStamp = new Date().getTime();
               let fileName = `cropped-img-${timeStamp}-${index}.png`;

               await croppedCanvas.toBlob(blob => {
                   let input = document.getElementById("input" + index);
                   // Convert cropped image to original image
                   let imgFile = new File([blob], fileName);
                   // Add images one by one
                   const fileList = new DataTransfer();
                   fileList.items.add(imgFile);
                   input.files = fileList.files;
               });

               // Avoid the container or frame after cropped
               cropperContainer.style.display = "none";
               cropper.destroy();
           });
       };
       reader.readAsDataURL(input.files[0]);
   }

   const selectedImages = [];
   document.getElementById("input1").addEventListener("change", handleFileSelect);

   function handleFileSelect(event) {
       const addedImagesContainer = document.getElementById("addedImagesContainer");
       addedImagesContainer.innerHTML = "";
       const files = event.target.files;

       for (let i = 0; i < files.length; i++) {
           const file = files[i];
           selectedImages.push(file);
           const thumbnail = document.createElement("div");
           thumbnail.classList.add("thumbnail");

           const img = document.createElement("img");
           img.src = URL.createObjectURL(file);
           img.alt = "thumbnail";
           img.style.width = "50px";
           img.style.height = "auto";
           const removeIcon = document.createElement("span");
           removeIcon.classList.add("remove-icon");
           removeIcon.innerHTML = "&times;";
           removeIcon.addEventListener("click", function () {
               const index = selectedImages.indexOf(file);
               if (index > -1) {
                   selectedImages.splice(index, 1);
                   handleFileSelect(event); // Re-render thumbnails
               }
           });

           thumbnail.appendChild(img);
           thumbnail.appendChild(removeIcon);
           addedImagesContainer.appendChild(thumbnail);
       }
   }

   // Form validation
   function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const productName = document.getElementById('product_name').value;
    if (productName.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }

    const description = document.getElementById('descriptionid').value;
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
    if (isNaN(regularPrice) || regularPrice <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid price.');
        isValid = false;
    }

    const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);
    if (isNaN(salePrice) || salePrice < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid sale price.');
        isValid = false;
    }

    // New validation for sale price
    if (salePrice > regularPrice) {
        displayErrorMessage('salePrice-error', 'Sale price cannot be greater than regular price.');
        isValid = false;
    }

    const quantity = document.getElementsByName('quantity')[0].value;
    if (isNaN(quantity) || quantity <= 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity.');
        isValid = false;
    }

    const color = document.getElementsByName('color')[0].value;
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    const images = document.querySelectorAll('input[type="file"]');
    let imageSelected = false;
    images.forEach((input) => {
        if (input.files.length > 0) {
            imageSelected = true;
        }
    });
    if (!imageSelected) {
        displayErrorMessage('images-error', 'Please upload at least one image.');
        isValid = false;
    }

    return isValid;
}

   function clearErrorMessages() {
       const errorElements = document.getElementsByClassName("error-message");
       for (let errorElement of errorElements) {
           errorElement.innerText = '';
           errorElement.style.display = 'none';
       }
   }

   function displayErrorMessage(elementId, message) {
       const errorElement = document.getElementById(elementId);
       errorElement.innerText = message;
       errorElement.style.display = 'block';
   }
</script>
