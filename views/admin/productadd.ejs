<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   .error-message {
       color: red;
   }
   .thumbnails-container {
       display: flex;
       flex-wrap: wrap;
       gap: 10px;
       margin-bottom: 20px;
   }
   .thumbnail {
       position: relative;
       width: 100px;
   }
   .thumbnail img {
       width: 100%;
       height: 100px;
       object-fit: cover;
   }
   .remove-icon {
       position: absolute;
       top: -8px;
       right: -8px;
       background: red;
       color: white;
       border-radius: 50%;
       width: 20px;
       height: 20px;
       display: flex;
       align-items: center;
       justify-content: center;
       cursor: pointer;
   }
   .image-cropper {
       position: fixed;
       top: 50%;
       left: 50%;
       transform: translate(-50%, -50%);
       z-index: 1000;
       background: white;
       padding: 20px;
       box-shadow: 0 0 10px rgba(0,0,0,0.5);
       display: none;
   }
   .crop-container {
       width: 400px;
       height: 300px;
       margin-bottom: 10px;
   }
</style>

<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-6">
           <div class="card mb-4">
               <div class="card-body">
                   <form method="post" action="/admin/addproducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                           <div id="productName-error" class="error-message"></div>
                       </div>
                       <div class="mb-4">
                           <label class="form-label">Full Description</label>
                           <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                           <div id="description-error" class="error-message"></div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Regular Price</label>
                                   <input placeholder="Regular price" name="regularPrice" type="number" class="form-control border">
                                   <div id="regularPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Sale Price</label>
                                   <input placeholder="Sale price" name="salePrice" type="number" class="form-control border">
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Quantity</label>
                                   <input placeholder="" name="quantity" type="text" class="form-control border">
                                   <div id="quantity-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Color</label>
                                   <input name="color" type="text" class="form-control border">
                                   <div id="color-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-4">
                           <div class="card-body">
                               <div class="row gx-2">
                                   <div class="col-sm-6 mb-3">
                                       <label class="form-label">Category</label>
                                       <select class="form-select border" style="width: 150px;" name="category">
                                        <% for (let i = 0; i < category.length; i++) { %>
                                            <option value="<%= category[i]._id %>">
                                                <%= category[i].name %>
                                            </option>
                                        <% } %>
                                       </select>
                                       <div id="category-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-2">
                        <div class="card-header">
                            <h4>Choose Images</h4>
                        </div>
                        <div class="card-body">
                            <div id="thumbnailsContainer" class="thumbnails-container"></div>
                            <input class="form-control" type="file" name="images" id="multipleImages" 
                                   accept="image/png, image/jpeg, image/jpg" multiple 
                                   onchange="handleMultipleImages(event)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="image-cropper">
                        <div class="crop-container">
                            <img id="cropperImage" src="" alt="">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Save Crop</button>
                        <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
                    </div>

                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
let cropper = null;
let currentImageIndex = null;
const processedImages = new Map();
const maxImages = 3; 

function handleMultipleImages(event) {
    const files = event.target.files;
    const container = document.getElementById('thumbnailsContainer');
    container.innerHTML = '';


    if (files.length >maxImages) {
        event.target.value = '';
        displayErrorMessage('images-error', 'Please upload exactly 3 images.');
        return;
    } else {
        clearErrorMessages(); 
    }


    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        
        reader.onload = function(e) {
            const thumbnail = createThumbnail(e.target.result, i);
            container.appendChild(thumbnail);
            processedImages.set(i, file);
        };
        
        reader.readAsDataURL(file);
    }
}

function createThumbnail(src, index) {
    const div = document.createElement('div');
    div.className = 'thumbnail';
    div.setAttribute('data-index', index);
    
    const img = document.createElement('img');
    img.src = src;
    img.onclick = () => startCropping(src, index);
    
    const removeBtn = document.createElement('span');
    removeBtn.className = 'remove-icon';
    removeBtn.innerHTML = 'x';
    removeBtn.onclick = (e) => {
        e.stopPropagation();
        removeThumbnail(div);
    };
    
    div.appendChild(img);
    div.appendChild(removeBtn);
    return div;
}

function removeThumbnail(thumbnailDiv) {
    const index = parseInt(thumbnailDiv.getAttribute('data-index'));
    processedImages.delete(index);
    thumbnailDiv.remove();
    updateFileInput();
    reorderThumbnails();
}

function reorderThumbnails() {
    const container = document.getElementById('thumbnailsContainer');
    const thumbnails = container.getElementsByClassName('thumbnail');
    
    Array.from(thumbnails).forEach((thumbnail, newIndex) => {
        const oldIndex = parseInt(thumbnail.getAttribute('data-index'));
        thumbnail.setAttribute('data-index', newIndex);
        
        // Update processedImages map with new indices
        if (processedImages.has(oldIndex)) {
            const file = processedImages.get(oldIndex);
            processedImages.delete(oldIndex);
            processedImages.set(newIndex, file);
        }
    });
}

function startCropping(src, index) {
    currentImageIndex = index;
    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = src;
    
    document.querySelector('.image-cropper').style.display = 'block';
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1
    });
}

function saveCroppedImage() {
    if (!cropper) return;
    
    cropper.getCroppedCanvas().toBlob((blob) => {
        const file = new File([blob], `cropped-image-${currentImageIndex}.jpg`, {
            type: 'image/jpeg'
        });
        
        processedImages.set(currentImageIndex, file);
     
        
        const thumbnail = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"] img`);
        if (thumbnail) {
        thumbnail.src = URL.createObjectURL(blob);
        }

        updateFileInput();
        cancelCrop();
    }, 'image/jpeg');
}

function cancelCrop() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    document.querySelector('.image-cropper').style.display = 'none';
}

function updateFileInput() {
    const dt = new DataTransfer();
    const sortedImages = Array.from(processedImages.entries())
        .sort(([a], [b]) => a - b)
        .map(([_, file]) => file);
    
    sortedImages.forEach(file => dt.items.add(file));
    document.getElementById('multipleImages').files = dt.files;
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const productName = document.getElementById('product_name').value;
    const productNameRegex = /^[a-zA-Z0-9\s]{3,}$/;
    if (!productNameRegex.test(productName)) {
        displayErrorMessage('productName-error', 'Product name must be at least 3 characters long and contain only letters and numbers.');
        isValid = false;
    }
    

    const description = document.getElementById('descriptionid').value;
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    const regularPrice = document.getElementsByName('regularPrice')[0].value;
    const priceRegex = /^\d+(\.\d{1,2})?$/;
    if (!priceRegex.test(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid price (positive number, up to 2 decimal places).');
        isValid = false;
    }

    const salePrice = document.getElementsByName('salePrice')[0].value;
    if (!priceRegex.test(salePrice) || parseFloat(salePrice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid sale price (positive number, up to 2 decimal places).');
        isValid = false;
    }

    if (parseFloat(salePrice) > parseFloat(regularPrice)) {
        displayErrorMessage('salePrice-error', 'Sale price cannot be greater than regular price.');
        isValid = false;
    }

    const quantity = document.getElementsByName('quantity')[0].value;
    const quantityRegex = /^[1-9][0-9]*$/; 
    if (!quantityRegex.test(quantity)) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity (positive integer).');
        isValid = false;
    }

    const color = document.getElementsByName('color')[0].value;
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    const images = document.getElementById('multipleImages').files;

    if (images.length < 3) {
        displayErrorMessage('images-error', 'Please upload at least 3 images.');
        isValid = false;
     } else if (images.length > 3) {
        displayErrorMessage('images-error', 'Please upload no more than 3 images.');
        isValid = false;
     } else {
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
      for (let i = 0; i < images.length; i++) {
           const file = images[i];
            if (!validImageTypes.includes(file.type)) {
               displayErrorMessage('images-error', 'Please upload only image files (JPEG, PNG, GIF, WEBP).');
               isValid = false;
               break; 
            }
       }
    }
   return isValid;
}


function clearErrorMessages() {
       const errorElements = document.getElementsByClassName("error-message");
       for (let errorElement of errorElements) {
           errorElement.innerText = '';
           errorElement.style.display = 'none';
       }
   }

   function displayErrorMessage(elementId, message) {
       const errorElement = document.getElementById(elementId);
       errorElement.innerText = message;
       errorElement.style.display = 'block';
   }
  
</script>
