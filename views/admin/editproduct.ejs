<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
    .error-message {
        color: red;
    }
    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }
    .thumbnail {
        position: relative;
        width: 100px;
    }
    .thumbnail img {
        width: 100%;
        height: 100px;
        object-fit: cover;
    }
    .remove-icon {
        position: absolute;
        top: -8px;
        right: -8px;
        background: red;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
    .image-cropper {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        background: white;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
        display: none;
    }
    .crop-container {
        width: 400px;
        height: 300px;
        margin-bottom: 10px;
    }
    .content-title{
    padding-left: 300px;
   }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" id="editForm" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.productName %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="number" class="form-control border" value="<%= product.quantity %>">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% cat.forEach(function(category) { %>
                                                <option value="<%= category._id %>" 
                                                        <%= product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                                                    <%= category.name %>
                                                </option>
                                            <% }); %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="card-body">
                                <div id="thumbnailsContainer" class="thumbnails-container">
                                    <% for (let i = 0; i < product.productImage.length; i++) { %>
                                        <div class="thumbnail" data-index="<%= i %>">
                                            <img src="/uploads/<%= product.productImage[i] %>" onclick="startCropping('<%=product.productImage[i] %>', '<%= i %>')" />
                                            <span class="remove-icon" onclick="removeThumbnail(this.parentElement)">x</span>
                                        </div>
                                    <% } %>
                                </div>
                                <input class="form-control" type="file" name="images" id="multipleImages" 
                                    accept="image/png, image/jpeg, image/jpg" multiple 
                                    onchange="handleMultipleImages(event)">
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="image-cropper">
                            <div class="crop-container">
                                <img id="cropperImage" src="" alt="">
                            </div>
                            <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Save Crop</button>
                            <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
                        </div>
                         
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Update Product</button>
                        </div>
                        <input type="hidden" name="deletedImages" id="deletedImages">
                    </form>
                </div>
            </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include('../layoutsAdmin/adminfooter') %>

<script>
let cropper = null;
let currentImageIndex = null;
const processedImages = new Map();
const maxImages = 3;
let deletedImages = [];

document.addEventListener('DOMContentLoaded', () => {
    initializeExistingImages();
});


function initializeExistingImages() {
    const thumbnailsContainer = document.getElementById('thumbnailsContainer');
    const existingThumbnails = thumbnailsContainer.querySelectorAll('.thumbnail');
    
    existingThumbnails.forEach((thumbnail, index) => {
        const imgElement = thumbnail.querySelector('img');
        const imgSrc = imgElement.src;
        const imgName = imgSrc.split('/').pop();
        
        processedImages.set(index, {
            type: 'existing',
            name: imgName,
            src: imgSrc
        });

        imgElement.onclick = () => startCropping(imgSrc, index);
        
        const removeBtn = thumbnail.querySelector('.remove-icon');
        removeBtn.onclick = (e) => {
            e.stopPropagation();
            removeThumbnail(thumbnail);
        };
    });
}

function addNewThumbnail(src, index, file) {
    const container = document.getElementById('thumbnailsContainer');
    const div = document.createElement('div');
    div.className = 'thumbnail';
    div.setAttribute('data-index', index);

    const img = document.createElement('img');
    img.src = src;
    img.onclick = () => startCropping(src, index);

    const removeBtn = document.createElement('span');
    removeBtn.className = 'remove-icon';
    removeBtn.innerHTML = 'x';
    removeBtn.onclick = (e) => {
        e.stopPropagation();
        removeThumbnail(div);
    };

    div.appendChild(img);
    div.appendChild(removeBtn);
    container.appendChild(div);

    processedImages.set(index, {
        type: 'new',
        file: file,
        src: src
    });
}

function removeThumbnail(thumbnailDiv) {
    const index = parseInt(thumbnailDiv.getAttribute('data-index'));
    const imageData = processedImages.get(index);
    
    if (imageData && imageData.type === 'existing') {
        deletedImages.push(imageData.name);
    }
    
    processedImages.delete(index);
    thumbnailDiv.remove();
    reorderThumbnails();
}

function reorderThumbnails() {
    const container = document.getElementById('thumbnailsContainer');
    const thumbnails = container.getElementsByClassName('thumbnail');
    const tempMap = new Map();
    
    Array.from(thumbnails).forEach((thumbnail, newIndex) => {
        const oldIndex = parseInt(thumbnail.getAttribute('data-index'));
        thumbnail.setAttribute('data-index', newIndex);
        
        if (processedImages.has(oldIndex)) {
            tempMap.set(newIndex, processedImages.get(oldIndex));
        }
    });
    
    processedImages.clear();
    tempMap.forEach((value, key) => {
        processedImages.set(key, value);
    });
}

function startCropping(src, index) {
    currentImageIndex = index;
    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = src;
    
    document.querySelector('.image-cropper').style.display = 'block';
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1
    });
}

function saveCroppedImage() {
    if (!cropper) {
        debugLog('save-cropped-image', 'No cropper instance found');
        return;
    }
    
    cropper.getCroppedCanvas().toBlob((blob) => {
        const fileName = `cropped-image-${currentImageIndex}.jpg`;
        const file = new File([blob], fileName, {
            type: 'image/jpeg'
        });

        const currentImage = processedImages.get(currentImageIndex);
        if (currentImage && currentImage.type === 'existing') {
            deletedImages.push(currentImage.name);
        }

        processedImages.set(currentImageIndex, {
            type: 'new',
            file: file,
            src: URL.createObjectURL(blob)
        });

        const thumbnail = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"] img`);
        if (thumbnail) {
            thumbnail.src = URL.createObjectURL(blob);
        }
        cancelCrop();
    }, 'image/jpeg');
}


function cancelCrop() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    document.querySelector('.image-cropper').style.display = 'none';
}

function debugLog(stage, data) {
    console.log(`[${stage}]`, data);
}

function handleMultipleImages(event) {
    debugLog('handleMultipleImages-start', 'Processing new files');
    const files = Array.from(event.target.files);
    debugLog('files-received', files);

    const container = document.getElementById('thumbnailsContainer');
    const currentCount = container.querySelectorAll('.thumbnail').length;

    if (currentCount + files.length > maxImages) {
        displayErrorMessage('images-error', `You can only have ${maxImages} images in total.`);
        return;
    }

    files.forEach((file) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            const index = processedImages.size;
            addNewThumbnail(e.target.result, index, file);
        };
        reader.readAsDataURL(file);
    });
    clearErrorMessages();
}

document.getElementById('editForm').onsubmit = function(e) {
    e.preventDefault();
    
    if (!validateForm()) {
        return false;
    }

    const form = document.getElementById('editForm');
    
    const formData = new FormData(form);

    formData.delete('images');
    
    formData.set('deletedImages', JSON.stringify(deletedImages));
    
    processedImages.forEach((imageData, index) => {
        if (imageData.type === 'new' && imageData.file) {
            formData.append('images', imageData.file);
        }
    });

    for (let pair of formData.entries()) {
        console.log(pair[0] + ': ' + (pair[1] instanceof File ? pair[1].name : pair[1]));
    }
    
    fetch(form.action, {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok: ' + response.statusText);
        }
        return response.json();
    })
    .then(data => {
        console.log("Server response:", data);
        if (data.success) {
            window.location.href = data.redirectUrl;
        } else if (data.error) {
            displayErrorMessage('productName-error', data.error);
        }
    })
    .catch(error => {
        console.error('Error during form submission:', error);
        displayErrorMessage('productName-error', 'An error occurred: ' + error.message);
    });

    return false;
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const productName = document.getElementById('product_name').value.trim();
    document.getElementById('product_name').value = productName;

    const productNameRegex = /^[a-zA-Z0-9\s]{3,}$/;
    if (!productNameRegex.test(productName)) {
        displayErrorMessage('productName-error', 'Product name must be at least 3 characters long and contain only letters and numbers.');
        isValid = false;
    }
    

    const description = document.getElementById('descriptionid').value.trim();
    document.getElementById('descriptionid').value = description;

    if (description === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

      const regularPrice = document.getElementsByName('regularPrice')[0].value.trim();
      document.getElementsByName('regularPrice')[0].value = regularPrice;
      
      const priceRegex = /^-?\d+(\.\d{1,2})?$/;  

      if (!priceRegex.test(regularPrice)) {
       displayErrorMessage('regularPrice-error', 'Please enter a valid price.');
       isValid = false;
    } else if (parseFloat(regularPrice) <= 0) {
       displayErrorMessage('regularPrice-error', 'Please enter a price greater than zero.');
       isValid = false;
    }

    const quantity = document.getElementsByName('quantity')[0].value.trim();
    document.getElementsByName('quantity')[0].value = quantity;
    
    const quantityRegex = /^[1-9][0-9]*$/; 
    if (!quantityRegex.test(quantity)) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity .');
        isValid = false;
    }

    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    const totalImages = processedImages.size;

    if (totalImages !== 3) {
        displayErrorMessage('images-error', 'Please upload exactly 3 image.');
        isValid = false;
    } else if (totalImages > maxImages) {
        displayErrorMessage('images-error', `Maximum ${maxImages} images allowed.`);
        isValid = false;
    }

    return isValid;
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    for (let errorElement of errorElements) {
        errorElement.innerText = '';
        errorElement.style.display = 'none';
    }
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = 'block';
}

</script>