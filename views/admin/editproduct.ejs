<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
    .error-message {
        color: red;
    }
    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }
    .thumbnail {
        position: relative;
        width: 100px;
    }
    .thumbnail img {
        width: 100%;
        height: 100px;
        object-fit: cover;
    }
    .remove-icon {
        position: absolute;
        top: -8px;
        right: -8px;
        background: red;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
    .image-cropper {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        background: white;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
        display: none;
    }
    .crop-container {
        width: 400px;
        height: 300px;
        margin-bottom: 10px;
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.productName %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input placeholder="$" name="salePrice" type="text" class="form-control border" value="<%= product.salePrice %>">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="text" class="form-control border" value="<%= product.quantity %>">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border" value="<%= product.color %>">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% for (let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>" <%= cat[i]._id === product.category ? 'selected' : '' %> >
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="card-body">
                                <div id="thumbnailsContainer" class="thumbnails-container">
                                    <% for (let i = 0; i < product.productImage.length; i++) { %>
                                        <div class="thumbnail" data-index="<%= i %>">
                                            <img src="/uploads/cropped/<%= product.productImage[i] %>" onclick="startCropping('<%=product.productImage[i] %>', '<%= i %>')" />
                                            <span class="remove-icon" onclick="removeThumbnail(this.parentElement)">x</span>
                                        </div>
                                    <% } %>
                                </div>
                                <input class="form-control" type="file" name="images" id="multipleImages" 
                                       accept="image/png, image/jpeg, image/jpg" multiple 
                                       onchange="handleMultipleImages(event)">
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="image-cropper">
                            <div class="crop-container">
                                <img id="cropperImage" src="" alt="">
                            </div>
                            <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Save Crop</button>
                            <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
                        </div>

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Update Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
let cropper = null;
let currentImageIndex = null;
const processedImages = new Map();
const maxImages = 3;
let originalImages = [];
let pendingImage = null;

// Initialize original images on page load
document.addEventListener('DOMContentLoaded', () => {
    const thumbnailsContainer = document.getElementById('thumbnailsContainer');
    const existingThumbnails = thumbnailsContainer.querySelectorAll('.thumbnail');
    
    existingThumbnails.forEach((thumbnail, index) => {
        const imgElement = thumbnail.querySelector('img');
        const imgSrc = imgElement.src;
        const imgName = imgSrc.split('/').pop();
        originalImages[index] = imgName;
        processedImages.set(index, null);
        
        // Update click handler for original images
        imgElement.onclick = () => startCropping(imgSrc, index);
        
        // Add remove button click handler
        const removeBtn = thumbnail.querySelector('.remove-icon');
        if (removeBtn) {
            removeBtn.onclick = (e) => {
                e.stopPropagation();
                removeThumbnail(thumbnail);
            };
        }
    });
});

function handleMultipleImages(event) {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;
    
    const file = files[0];
    const reader = new FileReader();
    
    reader.onload = function(e) {
        // Store the new image temporarily and open cropper
        pendingImage = {
            file: file,
            dataUrl: e.target.result
        };
        startCropping(e.target.result, currentImageIndex, true);
    };
    
    reader.readAsDataURL(file);
    event.target.value = ''; // Clear the input
}

function createImageInput() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/png, image/jpeg, image/jpg';
    input.style.display = 'none';
    input.onchange = handleMultipleImages;
    return input;
}

function removeThumbnail(thumbnailDiv) {
    const index = parseInt(thumbnailDiv.getAttribute('data-index'));
    currentImageIndex = index;
    
    // Create and trigger file input for replacement
    const input = createImageInput();
    document.body.appendChild(input);
    input.click();
    input.remove();
}

function startCropping(imageSrc, index, isNewImage = false) {
    if (cropper) {
        cropper.destroy();
    }

    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = imageSrc;

    // Show the cropping interface
    const cropperElement = document.querySelector('.image-cropper');
    cropperElement.style.display = 'block';

    cropper = new Cropper(cropperImage, {
        aspectRatio: 16 / 9,
        viewMode: 1,
        ready: function () {
            // Handle cropping for new images
            if (isNewImage) {
                const croppedImage = cropper.getCroppedCanvas().toDataURL();
                const index = processedImages.size; // Get next index for new image
                processedImages.set(index, croppedImage);
            }
        }
    });

    currentImageIndex = index;
}

function saveCroppedImage() {
    const croppedCanvas = cropper.getCroppedCanvas();
    const croppedImage = croppedCanvas.toDataURL();
    
    // Save the cropped image to the processedImages map
    processedImages.set(currentImageIndex, croppedImage);
    
    // Update the thumbnail
    const thumbnail = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"] img`);
    thumbnail.src = croppedImage;
    
    // Hide the cropping interface
    document.querySelector('.image-cropper').style.display = 'none';
}

function cancelCrop() {
    document.querySelector('.image-cropper').style.display = 'none';
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

function validateForm() {
    let isValid = true;
    
    const requiredFields = [
        { id: 'product_name', errorId: 'productName-error' },
        { id: 'descriptionid', errorId: 'description-error' },
        { id: 'regularPrice', errorId: 'regularPrice-error' },
        { id: 'salePrice', errorId: 'salePrice-error' },
        { id: 'quantity', errorId: 'quantity-error' },
        { id: 'color', errorId: 'color-error' },
        { id: 'category', errorId: 'category-error' },
    ];
    
    requiredFields.forEach(field => {
        const value = document.getElementById(field.id).value.trim();
        const errorDiv = document.getElementById(field.errorId);
        errorDiv.innerHTML = ''; // Clear previous error messages

        if (!value) {
            errorDiv.innerHTML = `${field.id.replace(/_/g, ' ')} is required.`;
            isValid = false;
        }
    });

    return isValid;
}
</script>
