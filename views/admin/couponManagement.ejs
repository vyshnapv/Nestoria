<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
    <title>Coupon Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f7fa;
        }

        .table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .table th, .table td {
            border: 1px solid #dee2e6;
            padding: 12px;
            text-align: left;
            transition: background-color 0.3s;
        }

        .table th {
            background-color: #364453;
            color: white;
            font-weight: bold;
        }

        .table tr {
            background-color: #ffffff;
        }

        .table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .table tr:hover {
            background-color: #e9ecef;
        }

        .header-btn {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header-btn .search-bar {
            width: 500px;
        }

        .pagination {
            margin: 20px 0;
        }

        .pagination .page-link {
            color: #364453;
            border: 1px solid #dee2e6;
            padding: 8px 16px;
            transition: all 0.3s ease;
        }

        .pagination .page-item.active .page-link {
            background-color: #364453;
            border-color: #364453;
            color: white;
        }

        .pagination .page-link:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
            color: #364453;
        }

        .text-center {
            font-size: 2.5rem;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

        /* Modal customization */
        .modal-dialog {
            max-width: 800px;
        }

        .row-input {
            display: flex;
            gap: 15px;
        }

        .row-input .form-group {
            flex: 1;
        }
        .error-message {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }
    .is-invalid {
        border-color: #dc3545;
    }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="header-btn">
            <form action="" method="get" class="d-inline">
                <div class="input-group input-group-sm search-bar">
                    <input type="text" class="form-control border-1 rounded-pill" placeholder="Search coupons" name="search">
                    <button class="btn btn-primary border-1 rounded-pill" type="submit">Search</button>
                </div>
            </form>
            <div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                    Create New Coupon
                </button>
            </div>
        </div>

        <h2 class="text-center">Coupon Management</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Coupon Code</th>
                    <th>Discount (%)</th>
                    <th>Expiry Date</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% if (coupons && coupons.length > 0) { %>
                    <% coupons.forEach(coupon => { %>
                        <tr>
                            <td><%= coupon.title %></td>
                            <td><%= coupon.couponCode %></td>
                            <td><%= coupon.percentage %>%</td>
                            <td><%= coupon.expiryDate.toLocaleDateString() %></td>
                            <td>
                                <span class="badge <%= coupon.status === 'Active' ? 'bg-success' : 'bg-danger' %>">
                                    <%= coupon.status %>
                                </span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-info btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        Action
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item edit-coupon" href="#" data-id="<%= coupon._id %>">Edit</a></li>
                                        <li>
                                            <a class="dropdown-item status-toggle" href="#" data-id="<%= coupon._id %>">
                                                <%= coupon.status === 'Active' ? 'Inactive' : 'Active' %>
                                            </a>
                                        </li>
                                        <li><a class="dropdown-item delete-coupon text-danger" href="#" data-id="<%= coupon._id %>">Delete</a></li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">No coupons found</td>
                        </tr>
                    <% } %>
            </tbody>
        </table>
        <div class="pagination-container mt-4">
          <% if (totalPages > 0) {%>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage-1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <% if (currentPage > 3) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=1<%= searchQuery ? '&search=' + searchQuery : '' %>">1</a>
                        </li>
                        <% if (currentPage > 4) { %>
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>
                    <% } %>

                    <% for(let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>"><%= i %></a>
                        </li>
                    <% } %>

                    <% if (currentPage < totalPages - 2) { %>
                        <% if (currentPage < totalPages - 3) { %>
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= totalPages %><%= searchQuery ? '&search=' + searchQuery : '' %>"><%= totalPages %></a>
                        </li>
                    <% } %>
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage+1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
          <% } %>
        </div>
    </div>

    <!-- Add New Coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCouponModalLabel">Create New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addCouponForm">
                        <div class="row-input mb-3">
                            <div class="form-group">
                                <label for="title" class="form-label">Coupon Title *</label>
                                <input type="text" class="form-control" id="title" >
                            </div>
                            <div class="form-group">
                                <label for="code" class="form-label">Coupon Code *</label>
                                <input type="text" class="form-control" id="code" >
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" rows="3"></textarea>
                        </div>
                        <div class="row-input mb-3">
                            <div class="form-group">
                                <label for="validFrom" class="form-label">Valid From *</label>
                                <input type="date" class="form-control" id="validFrom" >
                            </div>
                            <div class="form-group">
                                <label for="expiryDate" class="form-label">Expiry Date *</label>
                                <input type="date" class="form-control" id="expiryDate" >
                            </div>
                        </div>
                        <div class="row-input mb-3">
                            <div class="form-group">
                                <label for="discountPercentage" class="form-label">Discount Percentage (1-80%) *</label>
                                <input type="number" class="form-control" id="discountPercentage" min="1" max="80">
                            </div>
                            <div class="form-group">
                                <label for="minPurchase" class="form-label">Minimum Purchase Amount (₹)</label>
                                <input type="number" class="form-control" id="minPurchase" min="0">   
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="maxDiscount" class="form-label">Maximum Discount Amount (₹)</label>
                            <input type="number" class="form-control" id="maxDiscount">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" form="addCouponForm" class="btn btn-primary">Create Coupon</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editCouponForm">
                    <div class="row-input mb-3">
                        <div class="form-group">
                            <label for="editTitle" class="form-label">Coupon Title *</label>
                            <input type="text" class="form-control" id="editTitle">
                        </div>
                        <div class="form-group">
                            <label for="editCode" class="form-label">Coupon Code *</label>
                            <input type="text" class="form-control" id="editCode">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" rows="3"></textarea>
                    </div>
                    <div class="row-input mb-3">
                        <div class="form-group">
                            <label for="editValidFrom" class="form-label">Valid From *</label>
                            <input type="date" class="form-control" id="editValidFrom">
                        </div>
                        <div class="form-group">
                            <label for="editExpiryDate" class="form-label">Expiry Date *</label>
                            <input type="date" class="form-control" id="editExpiryDate">
                        </div>
                    </div>
                    <div class="row-input mb-3">
                        <div class="form-group">
                            <label for="editDiscountPercentage" class="form-label">Discount Percentage (1-80%) *</label>
                            <input type="number" class="form-control" id="editDiscountPercentage" min="1" max="80">
                        </div>
                        <div class="form-group">
                            <label for="editMinPurchase" class="form-label">Minimum Purchase Amount (₹)</label>
                            <input type="number" class="form-control" id="editMinPurchase" min="0">   
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="editMaxDiscount" class="form-label">Maximum Discount Amount (₹)</label>
                        <input type="number" class="form-control" id="editMaxDiscount">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="editCouponForm" class="btn btn-primary">Update Coupon</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const couponTable = document.querySelector('.table tbody');
    const addCouponForm = document.getElementById('addCouponForm');
    const editCouponForm = document.getElementById('editCouponForm');

    // Validation functions
    const validateInput = {
        title: (title) => {
            if (!title.trim()) return "Coupon title is required";
            if (title.length < 3 || title.length > 50) return "Title must be between 3 and 50 characters";
            return null;
        },
        code: (code) => {
            if (!code.trim()) return "Coupon code is required";
            if (!/^[A-Z0-9]{6,10}$/.test(code)) return "Code must be 6-10 uppercase letters or numbers";
            return null;
        },
        dates: (validFrom, expiryDate) => {
            const fromDate = new Date(validFrom);
            const toDate = new Date(expiryDate);
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            if (!validFrom) return "Valid from date is required";
            if (!expiryDate) return "Expiry date is required";
            if (fromDate < today) return "Valid from date cannot be in the past";
            if (toDate <= fromDate) return "Expiry date must be after valid from date";
            return null;
        },
        discount: (percentage, minPurchase, maxDiscount) => {
            const discountPercentage = parseFloat(percentage);
            const minPurchaseAmount = parseFloat(minPurchase);
            const maxDiscountAmount = parseFloat(maxDiscount);

            if (!percentage || isNaN(discountPercentage)) return "Discount percentage is required";
            if (discountPercentage < 1 || discountPercentage > 80) return "Discount must be between 1% and 80%";
            if (minPurchaseAmount && minPurchaseAmount < 0) return "Minimum purchase amount cannot be negative";
            if (maxDiscountAmount && maxDiscountAmount < 0) return "Maximum discount amount cannot be negative";
            return null;
        }
    };

    const displayError = (input, message) => {
        const existingError = input.parentElement.querySelector('.error-message');
        if (existingError) existingError.remove();

        const errorElement = document.createElement('div');
        errorElement.className = 'error-message text-danger small mt-1';
        errorElement.textContent = message;
    
        input.parentElement.appendChild(errorElement);
        input.classList.add('is-invalid');
    };

    const clearError = (input) => {
        const existingError = input.parentElement.querySelector('.error-message');
        if (existingError) existingError.remove();
        input.classList.remove('is-invalid');
    };

    const setupDateInputs = (validFromInput, expiryDateInput) => {
        const today = new Date().toISOString().split('T')[0];
        validFromInput.setAttribute('min', today);
        expiryDateInput.setAttribute('min', today);

        validFromInput.addEventListener('change', () => {
            expiryDateInput.setAttribute('min', validFromInput.value || today);
        });
    };

    const addInputs = {
        title: document.getElementById('title'),
        code: document.getElementById('code'),
        validFrom: document.getElementById('validFrom'),
        expiryDate: document.getElementById('expiryDate'),
        discountPercentage: document.getElementById('discountPercentage'),
        minPurchase: document.getElementById('minPurchase'),
        maxDiscount: document.getElementById('maxDiscount'),
        description: document.getElementById('description')
    };

    const editInputs = {
        title: document.getElementById('editTitle'),
        code: document.getElementById('editCode'),
        validFrom: document.getElementById('editValidFrom'),
        expiryDate: document.getElementById('editExpiryDate'),
        discountPercentage: document.getElementById('editDiscountPercentage'),
        minPurchase: document.getElementById('editMinPurchase'),
        maxDiscount: document.getElementById('editMaxDiscount'),
        description: document.getElementById('editDescription')
    };

    setupDateInputs(addInputs.validFrom, addInputs.expiryDate);
    setupDateInputs(editInputs.validFrom, editInputs.expiryDate);

    Object.values({...addInputs, ...editInputs}).forEach(input => {
        input.addEventListener('input', () => clearError(input));
    });

    const handleCouponSubmission = async (form, inputs, isEdit = false) => {
        let isValid = true;
        const titleError = validateInput.title(inputs.title.value);
        const codeError = validateInput.code(inputs.code.value);
        const dateError = validateInput.dates(inputs.validFrom.value, inputs.expiryDate.value);
        const discountError = validateInput.discount(
            inputs.discountPercentage.value, 
            inputs.minPurchase.value, 
            inputs.maxDiscount.value
        );

        if (titleError) {
            displayError(inputs.title, titleError);
            isValid = false;
        }
        if (codeError) {
            displayError(inputs.code, codeError);
            isValid = false;
        }
        if (dateError) {
            displayError(inputs.validFrom, dateError);
            displayError(inputs.expiryDate, dateError);
            isValid = false;
        }
        if (discountError) {
            displayError(inputs.discountPercentage, discountError);
            isValid = false;
        }

        if (!isValid) return;

        const formData = {
            title: inputs.title.value,
            code: inputs.code.value,
            description: inputs.description.value,
            validFrom: inputs.validFrom.value,
            expiryDate: inputs.expiryDate.value,
            discountPercentage: inputs.discountPercentage.value,
            minPurchase: inputs.minPurchase.value,
            maxDiscount: inputs.maxDiscount.value
        };

        try {
            const url = isEdit 
                ? `/admin/updateCoupon/${form.dataset.couponId}` 
                : '/admin/createCoupon';
            const method = isEdit ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (response.ok) {
                const modalId = isEdit ? '#editCouponModal' : '#addCouponModal';
                const modal = bootstrap.Modal.getInstance(document.querySelector(modalId));
                modal.hide();
                
                Swal.fire({
                    icon: 'success',
                    title: `Coupon ${isEdit ? 'Updated' : 'Created'}!`,
                    text: `Your coupon has been successfully ${isEdit ? 'updated' : 'created'}.`,
                    confirmButtonColor: '#3085d6'
                }).then(() => location.reload());
            } else {
                Swal.fire({
                    icon: 'error',
                    title: `Coupon ${isEdit ? 'Update' : 'Creation'} Failed`,
                    text: result.message || `Failed to ${isEdit ? 'update' : 'create'} coupon`
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `An unexpected error occurred while ${isEdit ? 'updating' : 'creating'} the coupon`
            });
        }
    };

    addCouponForm.addEventListener('submit', (e) => {
        e.preventDefault();
        handleCouponSubmission(addCouponForm, addInputs);
    });

    editCouponForm.addEventListener('submit', (e) => {
        e.preventDefault();
        handleCouponSubmission(editCouponForm, editInputs, true);
    });

    couponTable.addEventListener('click', async (e) => {
        const target = e.target;

        if (target.classList.contains('edit-coupon')) {
            e.preventDefault();
            const couponId = target.getAttribute('data-id');
            
            try {
                const response = await fetch(`/admin/getCoupon/${couponId}`);
                if (!response.ok) throw new Error('Failed to fetch coupon details');
                
                const coupon = await response.json();
                
                editInputs.title.value = coupon.title;
                editInputs.code.value = coupon.couponCode;
                editInputs.description.value = coupon.description || '';
                editInputs.validFrom.value = new Date(coupon.addedDate).toISOString().split('T')[0];
                editInputs.expiryDate.value = new Date(coupon.expiryDate).toISOString().split('T')[0];
                editInputs.discountPercentage.value = coupon.percentage;
                editInputs.minPurchase.value = coupon.minPrice || '';
                editInputs.maxDiscount.value = coupon.maxRedeemAmount || '';        

                editCouponForm.dataset.couponId = couponId;
                new bootstrap.Modal(document.getElementById('editCouponModal')).show();
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to fetch coupon details'
                });
            }
        }

        if (target.classList.contains('status-toggle')) {
            e.preventDefault();
            const couponId = target.getAttribute('data-id');
            const currentRow = target.closest('tr');
            const currentStatus = currentRow.querySelector('.badge').textContent.trim();
            const newStatus = currentStatus === 'Active' ? 'Inactive' : 'Active';

            try {
                const confirmResult = await Swal.fire({
                    title: 'Are you sure?',
                    text: `Do you want to ${currentStatus === 'Active' ? 'deactivate' : 'activate'} this coupon?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: `Yes, ${currentStatus === 'Active' ? 'deactivate' : 'activate'} it!`
                });

                if (confirmResult.isConfirmed) {
                    const response = await fetch(`/admin/toggleCouponStatus/${couponId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const result = await response.json();

                    if (response.ok) {
                        const statusBadge = currentRow.querySelector('.badge');
                        statusBadge.textContent = newStatus;
                        statusBadge.classList.remove('bg-success', 'bg-danger');
                        statusBadge.classList.add(newStatus === 'Active' ? 'bg-success' : 'bg-danger');

                        target.textContent = newStatus === 'Active' ? 'Inactive' : 'Active';

                        Swal.fire({
                            icon: 'success',
                            title: 'Status Updated',
                            text: `Coupon has been ${newStatus.toLowerCase()} successfully`,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        throw new Error(result.message || 'Failed to update status');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update coupon status'
                });
            }
        }

        // Delete Coupon
        if (target.classList.contains('delete-coupon')) {
            e.preventDefault();
            const couponId = target.getAttribute('data-id');

            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/deleteCoupon/${couponId}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Failed to delete coupon');
                    }

                    target.closest('tr').remove();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Coupon has been deleted successfully.',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to delete coupon'
                    });
                }
            }
        }
    });
});
</script>

