//this is my product offerpage 
<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
    <style>
        :root {
            --primary-color: rgb(66, 168, 66);
            --primary-hover: #375336;
            --secondary-color: #64748b;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8fafc;
            color: #1e293b;
            font-size: 14px;
        }

        .container {
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
            max-height: 100vh;
            padding: 10px;
        }

        h1 {
            color: #1e293b;
            margin: 0 0 15px 0;
            font-size: 33px; 
            font-weight: 600;
            padding-top: 5px;  
        }

        .back-btn {
            position: absolute;
            top: 15px;  
            right:15px;  
            padding: 6px 12px; 
            background-color: rgb(92, 117, 158);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            font-size: 14px;
        }

        .back-btn:hover {
            background-color: #776fbb;
            color: white;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;           /* Increased gap */
            padding: 0 15px; 
        }

        .form-row {
            padding: 8px;
            background: #f8fafc;
            border-radius: 6px;
        }
        .form-row:nth-child(1) input,
        .form-row:nth-child(2) input {
           max-width: 500px;
           width: 100%;
        }

        label {
            font-weight: 500;
            color: #475569;
            flex: 1;
            font-size: 14px;
        }

        input[type="text"],
        input[type="number"],
        input[type="date"] {
            flex: 2;
            padding: 7px 8px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            width: 100%;
            font-size: 14px;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        input[type="date"]:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 1px rgba(79, 70, 229, 0.1);
        }

        .two-columns {
            display: flex;
            justify-content: space-between;
            gap: 15px; 
            margin: 10px 0;
        }

        .column {
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
            flex: 1;
        }

        .search-container {
            position: relative;
            margin-bottom: 6px;
        }

        .search-container .clear-btn {
            position: absolute;
            right: 4px;
            top: 50%;
            transform: translateY(-50%);
            padding: 2px 6px;
            font-size: 15px;
            background: #e2e8f0;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .product-list {
            max-height: 250px;  /* Increased height */
            overflow-y: auto;
            border: 1px solid #e2e8f0;
            padding: 12px;      /* Increased padding */
            border-radius: 4px;
            background: white;
            margin-top: 10px;
        }

        .product-list label {
            display: flex;
            align-items: center;
            padding: 3px;
            margin: 1px 0;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .product-list label:hover {
            background: #f1f5f9;
        }

        .product-list input[type="checkbox"] {
            margin-right: 6px;
            width: 12px;
            height: 12px;
            border-radius: 2px;
            border: 1px solid #94a3b8;
        }

        .right-column-content {
            display: flex;
            flex-direction: column;
            gap: 10px;
            height: 100%;
        }

        .date-container {
            margin-bottom: 10px;
        }

        .selected-products {
            flex-grow: 1;
            background: white;
            padding: 8px;      /* Increased padding */
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            height: calc(100% - 60px);  /* Adjusted height */
            overflow-y: auto;
            margin-top: 8px; 
        }

        .selected-products div {
            margin-top: 6px;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }

        .tag {
            background: var(--primary-color);
            color: white;
            padding: 3px 6px;
            border-radius: 3px;
            font-size: 13px;
        }

        .form-actions {
            margin-top: -20px; 
            padding-bottom: 10px; 
        }
        .create-btn {
            padding: 8px 30px; 
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            font-size: 15px;
            
        }

        .create-btn:hover {
            background-color: var(--primary-hover);
        }

        @media (max-width: 768px) {
            .container {
                margin: 20px;
                padding: 20px;
            }

            .two-columns {
                flex-direction: column;
                gap: 8px;
            }

            .form-row {
                flex-direction: column;
                align-items: stretch;
                padding: 6px;
            }
            form {
                padding: 0;
            }
        }
    </style>
    <div class="container">
        <a href="/admin/offerManagement" class="back-btn">← Back to offerPage</a>
        <h1>Create Product Offer</h1>
        <form>
            <div class="form-row">
                <label for="offerName">Offer Name:</label>
                <input type="text" id="offerName" placeholder="Enter offer name" required>
            </div>
            
            <div class="form-row">
                <label for="discountPercentage">Discount Percentage:</label>
                <input type="number" id="discountPercentage" min="0" max="90" placeholder="Enter percentage" required>
            </div>

            <div class="form-row two-columns">
                <div class="column">
                    <label for="products">Select Products</label>
                    <div class="search-container">
                        <input type="text" id="searchProducts" placeholder="Search products...">
                        <button type="button" class="clear-btn">clear</button>
                    </div>
                    <div class="product-list">
                        <% if (products && products.length > 0) { %>
                            <% products.forEach(function(product) { %>
                                <label>
                                    <input type="checkbox" value="<%= product._id %>">
                                    <%= product.productName %> - ₹<%= product.regularPrice %>
                                </label>
                            <% }); %>
                        <% } else { %>
                            <p>No products available for offer</p>
                        <% } %>
                    </div>
                </div>

                <div class="column">
                    <div class="right-column-content">
                        <div class="date-container">
                            <label for="expiryDate">Expiry Date</label>
                            <input type="date" id="expiryDate" required>
                        </div>
                        
                        <div class="selected-products">
                            <label>Selected Products</label>
                            <div>
                                <!-- Selected products will appear here dynamically -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="create-btn">Create Product Offer</button>
            </div>
        </form>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const searchInput = document.getElementById('searchProducts');
    const clearBtn = document.querySelector('.clear-btn');
    const productList = document.querySelector('.product-list');
    const selectedProductsDiv = document.querySelector('.selected-products div');

    // Set minimum date for expiry date input
    const expiryDateInput = document.getElementById('expiryDate');
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    expiryDateInput.min = tomorrow.toISOString().split('T')[0];

    // Search functionality
    searchInput.addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const products = productList.querySelectorAll('label');
        
        products.forEach(product => {
            const productName = product.textContent.toLowerCase();
            if (productName.includes(searchTerm)) {
                product.style.display = '';
            } else {
                product.style.display = 'none';
            }
        });
    });

    // Clear search
    clearBtn.addEventListener('click', function() {
        searchInput.value = '';
        productList.querySelectorAll('label').forEach(product => {
            product.style.display = '';
        });
    });

    // Update selected products
    function updateSelectedProducts() {
        selectedProductsDiv.innerHTML = '';
        const checkedBoxes = productList.querySelectorAll('input[type="checkbox"]:checked');
        
        checkedBoxes.forEach(checkbox => {
            const span = document.createElement('span');
            span.className = 'tag';
            span.textContent = checkbox.parentElement.textContent.trim();
            selectedProductsDiv.appendChild(span);
        });
    }

    // Handle checkbox changes
    productList.addEventListener('change', function(e) {
        if (e.target.type === 'checkbox') {
            updateSelectedProducts();
        }
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const offerName = document.getElementById('offerName').value.trim();
        const discountPercentage = parseFloat(document.getElementById('discountPercentage').value);
        const expiryDate = document.getElementById('expiryDate').value;
        const selectedProducts = Array.from(productList.querySelectorAll('input[type="checkbox"]:checked'))
            .map(checkbox => checkbox.value);

        // Validation
        if (!offerName) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please enter an offer name'
            });
            return;
        }

        if (isNaN(discountPercentage) || discountPercentage <= 0 || discountPercentage > 90) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Discount percentage must be between 0 and 90'
            });
            return;
        }

        if (!expiryDate) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please select an expiry date'
            });
            return;
        }

        if (selectedProducts.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please select at least one product'
            });
            return;
        }

        try {
            const response = await fetch('/admin/createProductOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    offerName,
                    discountPercentage,
                    selectedProducts,
                    expiryDate
                })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Offer created successfully'
                }).then(() => {
                    window.location.href = '/admin/offerManagement';
                });
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to create offer'
            });
        }
    });
});
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

//this is offer controller page 
const Product = require("../../models/productModel");
const Offer = require("../../models/offerModel");
const Category = require("../../models/categoryModel");

//offer management page
const offerManagement=async(req,res)=>{
    try {
        const search=req.query.search || "";
        const query={
            $or:[
                {offerName:{$regex:search,$options:'i'}},
                {offerType:{$regex:search,$options:'i'}},
            ]
        };

        const offers=await Offer.find(query).sort({createdAt:-1});

        const currentDate=new Date();
        const processedOffers = offers.map(offer=>{
            const isExpired = offer.expireDate < currentDate;
            return{
                ...offer._doc,
                status:isExpired?"Expired":offer.status,
                formattedExpiryDate:offer.expireDate.toISOString().split('T')[0]
            };
        });

        res.render("offerManagement",{offers:processedOffers})
    } catch (error) {
        console.error("Error in offer management:", error);
        res.redirect("/pageerror"); 
    }
}


//load product offer page 
const loadProductOffer=async(req,res)=>{
    try {
        const activeProducts=await Product.find({
            isBlocked:false,
            _id:{
                $nin:await Offer.distinct("productId",{
                    status:"Active",
                    expireDate:{$gt:new Date()}
                })
            }
        })
        res.render("productOffer",{products:activeProducts})
    } catch (error) {
        console.error("Error loading product offer page:", error);
        res.redirect("/pageerror");
    }
}

//create product offer
const createProductOffer = async(req,res)=>{
    try {
        const {offerName,discountPercentage,selectedProducts,expiryDate}=req.body;

        if(!offerName || !discountPercentage || !selectedProducts || !expiryDate){
            return res.status(400).json({success:false,message:"please fill all required fields"});
        }

        const discount=parseFloat(discountPercentage);
        if(isNaN(discount)|| discount <=0 || discount>50){
            return res.status(400).json({success:false,message:"Discount percentagemust be betweeen 0 and 50"})
        }

        const expiry=new Date(expiryDate);
        const now=new Date();
        if(expiry <= now){
            return res.status(400).json({success:false,message:"Expiry date must be in the future"});
        }

        const productIds=Array.isArray(selectedProducts)?selectedProducts:[selectedProducts];

        for(const productId of productIds){
            const product=await Product.findOne({_id:productId,isBlocked:false});
            if(!product){
               return res.status(404).json({success:false,message:`product not found or inactive:${productId}`});
            }

            const existingOffer = await Offer.findOne({
                productId: productId,
                status: 'Active',
                expireDate: { $gt: now }
            });

            if (existingOffer) {
                return res.status(400).json({
                    success: false,
                    message: `Product ${product.productName} already has an active offer`
                });
            }

            const offer = new Offer({
                productName: product.productName,
                offerType: "Product",
                offerName: offerName,
                discount: discount,
                expireDate: expiry,
                productId: productId,
                status: 'Active'
            });

            await offer.save();
        }
        res.status(200).json({success: true,message: "Offers created successfully"});
    } catch (error) {
        console.error("Error creating offer:", error);
        res.status(500).json({success: false,message: "Failed to create offer. Please try again."});
    }
}


//load category offer page
const loadCategoryOffer= async(req,res)=>{
    try {
        const activeCategories=await Category.find({
            isListed:true,
            _id:{
                $nin:await Offer.distinct("categoryId",{
                    status:"Active",
                    expireDate:{$gt:new Date()}
                })
            }
        });
        res.render("categoryOffer",{categories:activeCategories})
    } catch (error) {
        console.error("Error loading category offer page:", error);
        res.redirect("/pageerror");
    }
}

//createcategory controller 
const createCategoryOffer=async(req,res)=>{
    try {
        const {offerName,discountPercentage,selectedCategories,expiryDate}=req.body;

        if(!offerName || !discountPercentage || !selectedCategories || !expiryDate){
            return res.status(400).json({success:false,message:"Please fill all the reqired fields"})
        }

        const discount=parseFloat(discountPercentage);
        if(isNaN(discount) || discount<=0 || discount>50){
            return res.status(400).json({success:false,message:"Discount percentage muist be between 0 and 50"})
        }

        const expiry=new Date(expiryDate);
        const now=new Date()
        if(expiry <= now){
            return res.status(400).json({success:false,message:"Expiry date must be in the future"})
        }

        const categoryIds=Array.isArray(selectedCategories)?selectedCategories:[selectedCategories];

        for(const categoryId of categoryIds){
            const category=await Category.findOne({_id:categoryId,isListed:true});
            if(!category){
                return res.status(404).json({success:false,message:`Category not found or inactive: ${categoryId}`})
            }
            const existingOffer=await Offer.findOne({
                categoryId:categoryId,
                status:"Active",
                expireDate:{$gt:now}
            });

            if(existingOffer){
                return res.status(400).json({success:false,message:`Category ${category.name} already has an active offer`})
            }

            const offer=new Offer({
                categoryName:category.name,
                offerType:"Category",
                offerName:offerName,
                discount:discount,
                expireDate:expiry,
                categoryId:categoryId,
                status:"Active"
            });

            await offer.save();
        }

        res.status(200).json({success:true,message:"Category offers created successfully"});
    } catch (error) {
        console.error("Error creating category offer:", error);
        res.status(500).json({success:false,message:"Failed to create offer.Please try again."})
    }
}


module.exports={
    offerManagement,
    loadProductOffer,
    createProductOffer,
    loadCategoryOffer,
    createCategoryOffer,
}

//this is offer model page 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const offerSchema = new Schema(
    {
        productName: {
            type: String,
            required: function() {
                return this.offerType === "Product";
            }
        },
        categoryName: {
            type: String,
            required: function() {
                return this.offerType === "Category";
            }
        },
        offerType: {
            type: String,
            enum: ["Product", "Category"],
            required: true,
        },
        offerName: {
            type: String,
            required: true,
        },
        discount: {
            type: Number,
            required: true,
        },
        expireDate: {
            type: Date,
            required: true,
        },
        productId: {
            type: Schema.Types.ObjectId,
            ref: "Product",
            required: function () {
                return this.offerType === "Product";
            },
        },
        categoryId: {
            type: Schema.Types.ObjectId,
            ref: "Category",
            required: function () {
                return this.offerType === "Category";
            },
        },
        referralCode: {
            type: String,
            required: false,
        },
        status: {
            type: String,
            enum: ["Active", "Expired", "Pending"],
            default: "Pending",
        },
        isBlocked: {
            type: Boolean,
            default: false,
        },
    },
    { timestamps: true }
);

const Offer = mongoose.model("Offer",offerSchema);
module.exports = Offer;

//this is offermanagement pa