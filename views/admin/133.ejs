//this is my product page in admin side
   </head>

     <div class="content-header">
       <div>
         <h2 class="content-title card-title">Products List</h2>
       </div>
     </div>

     <header class="card-header text-center mb-20">
        <form action="" method="get" class="d-inline">
            <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin: 0 auto;">
                <input type="text" class="form-control border-0 rounded-pill" placeholder="Search products or brands" name="search">
                <button class="btn border-0" type="submit">Search</button>
            </div>
        </form>
        <div class="mt-2">
            <a href="/admin/addproducts" class="btn btn-primary btn-sm rounded">Add new products</a>
        </div>
    </header>

  <div class="right mt-5">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col"><b>Product Name</b></th>
                <th scope="col"><b>Image</b></th>
                <th scope="col"><b>Category</b></th>
                <th scope="col"><b>Sale Price</b></th>
                <th scope="col"><b>Quantity</b></th>
                <th scope="col"><b>status</b></th>
                <th scope="col"><b>Action</b></th>
                <th scope="col"><b>Edit</b></th>
            </tr>
        </thead>
        <tbody>
            <% for (let i = data.length - 1; i >= 0; i--) { %>
            <tr>
                <td><%= data[i].productName %></td>
                <td>
                    <img style="width: 50px; height: 60px;" src="/uploads/cropped/<%= data[i].productImage[0] %>" alt="">
                </td>
                <td><%= data[i].category.name %></td>
                <td><%= data[i].salePrice %></td>
                <td><%= data[i].quantity %></td>
                
                <td class="text-start ">
                    <% if (data[i].isBlocked) { %>
                      <span class="badge rounded-pill alert-danger" style="width: 60px">Inactive</span>
                    <% } else { %>
                      <span class="badge rounded-pill alert-success" style="width: 60px">Active</span>
                    <% } %>
                  </td>

                <td>
                    <% if (data[i].isBlocked === false) { %>
                      <button class="btn btn-danger" style="width: 80px;" onclick="handleBlockProduct('<%= data[i]._id %>', 'block')">
                        <span class="text-white" style="text-decoration: none;">Block</span>
                      </button>
                    <% } else { %>
                      <button class="btn btn-success" style="width: 80px;" onclick="handleBlockProduct('<%= data[i]._id %>', 'unblock')">
                        <span class="text-white" style="text-decoration: none;">unBlock</span>
                      </button>
                    <% } %>
                  </td>
                <td>
                    <button class="btn btn-info" style="width: 80px;">
                        <a href="/admin/editProduct?id=<%=data[i]._id%>" class="text-white" style="text-decoration: none;">Edit</a>
                    </button>
                </td>
            </tr>
            <% } %>
        </tbody>
    </table>
    
    
  </div>
  <div class="pagination-container mt-30 mb-50">
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-start">
            <% if (currentPage > 1) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= search %>">
                        <i class="material-icons md-chevron_left"></i>
                    </a>
                </li>
            <% } %>

            <% for (let i = 1; i <= totalPages; i++) { %>
                <% if (i === currentPage) { %>
                    <li class="page-item active">
                        <a class="page-link" href="#"><%= i %></a>
                    </li>
                <% } else { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= i %>&search=<%= search %>"><%= i %></a>
                    </li>
                <% } %>
            <% } %>

            <% if (currentPage < totalPages) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= search %>">
                        <i class="material-icons md-chevron_right"></i>
                    </a>
                </li>
            <% } %>
        </ul>
    </nav>
</div>

<script>
    function handleBlockProduct(productId, action) {
        const actionText = action === 'block' ? 'Block' : 'Unblock';
        const actionUrl = action === 'block' ? `/admin/blockProduct?id=${productId}` : `/admin/unblockProduct?id=${productId}`;

        Swal.fire({
            title: `Are you sure you want to ${actionText} this product?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: `Yes, ${actionText} it!`,
            customClass: {
            popup: 'swal-popup', 
            title: 'swal-title',  
            content: 'swal-content'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(actionUrl, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: productId }),
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.message || 'Failed to list /Unlist the product');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire(
                            'Success!',
                            `Product has been ${actionText.toLowerCase()}ed.`,
                            'success'
                        ).then(() => {
                            location.reload(); 
                        });
                    })
                    .catch(error => {
                        Swal.fire(
                            'Error!',
                            error.message,
                            'error'
                        );
                    });
                 }
              });
            }
</script>
  
// this is product add page in admin side
<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-6">
           <div class="card mb-4">
               <div class="card-body">
                   <form method="post" action="/admin/addproducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                           <div id="productName-error" class="error-message"></div>
                       </div>
                       <div class="mb-4">
                           <label class="form-label">Full Description</label>
                           <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                           <div id="description-error" class="error-message"></div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Regular Price</label>
                                   <input placeholder="Regular price" name="regularPrice" type="number" class="form-control border">
                                   <div id="regularPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Sale Price</label>
                                   <input placeholder="Sale price" name="salePrice" type="number" class="form-control border">
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Quantity</label>
                                   <input placeholder="" name="quantity" type="text" class="form-control border">
                                   <div id="quantity-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Color</label>
                                   <input name="color" type="text" class="form-control border">
                                   <div id="color-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-4">
                           <div class="card-body">
                               <div class="row gx-2">
                                   <div class="col-sm-6 mb-3">
                                       <label class="form-label">Category</label>
                                       <select class="form-select border" style="width: 150px;" name="category">
                                        <% for (let i = 0; i < category.length; i++) { %>
                                            <option value="<%= category[i]._id %>">
                                                <%= category[i].name %>
                                            </option>
                                        <% } %>
                                       </select>
                                       <div id="category-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-2">
                        <div class="card-header">
                            <h4>Choose Images</h4>
                        </div>
                        <div class="card-body">
                            <div id="thumbnailsContainer" class="thumbnails-container"></div>
                            <input class="form-control" type="file" name="images" id="multipleImages" 
                                   accept="image/png, image/jpeg, image/jpg" multiple 
                                   onchange="handleMultipleImages(event)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="image-cropper">
                        <div class="crop-container">
                            <img id="cropperImage" src="" alt="">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Save Crop</button>
                        <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
                    </div>

                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
let cropper = null;
let currentImageIndex = null;
const processedImages = new Map();
const maxImages = 3; 

function handleMultipleImages(event) {
    const files = event.target.files;
    const container = document.getElementById('thumbnailsContainer');

    const existingCount = container.getElementsByClassName('thumbnail').length;
    const newFilesCount = files.length;

    if (existingCount + newFilesCount > maxImages) {
        event.target.value = '';
        displayErrorMessage('images-error', 'Total number of images cannot exceed 3.');
        return;
    }

    clearErrorMessages();

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        
        reader.onload = function(e) {
            const nextIndex = processedImages.size;
            const thumbnail = createThumbnail(e.target.result, nextIndex);
            container.appendChild(thumbnail);

            const newFile = new File([file], file.name, { type: file.type });
            processedImages.set(nextIndex, newFile);
            updateFileInput();
        };
        
        reader.readAsDataURL(file);
    }
}

function createThumbnail(src, index) {
    const div = document.createElement('div');
    div.className = 'thumbnail';
    div.setAttribute('data-index', index);
    
    const img = document.createElement('img');
    img.src = src;
    img.onclick = () => startCropping(src, index);
    
    const removeBtn = document.createElement('span');
    removeBtn.className = 'remove-icon';
    removeBtn.innerHTML = 'x';
    removeBtn.onclick = (e) => {
        e.stopPropagation();
        removeThumbnail(div);
    };
    
    div.appendChild(img);
    div.appendChild(removeBtn);
    return div;
}

function removeThumbnail(thumbnailDiv) {
    const index = parseInt(thumbnailDiv.getAttribute('data-index'));
    processedImages.delete(index);
    thumbnailDiv.remove();
    reorderThumbnails();
    updateFileInput();
}

function reorderThumbnails() {
    const container = document.getElementById('thumbnailsContainer');
    const thumbnails = container.getElementsByClassName('thumbnail');
    
    const tempMap = new Map();
    Array.from(thumbnails).forEach((thumbnail, newIndex) => {
        const oldIndex = parseInt(thumbnail.getAttribute('data-index'));
        thumbnail.setAttribute('data-index', newIndex);
        
        if (processedImages.has(oldIndex)) {
            tempMap.set(newIndex, processedImages.get(oldIndex));
        }
    });
    
    processedImages.clear();
    tempMap.forEach((value, key) => {
        processedImages.set(key, value);
    });
}

function startCropping(src, index) {
    currentImageIndex = index;
    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = src;
    
    document.querySelector('.image-cropper').style.display = 'block';
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1
    });
}

function saveCroppedImage() {
    if (!cropper) return;
    
    cropper.getCroppedCanvas().toBlob((blob) => {
        const file = new File([blob], `cropped-image-${currentImageIndex}.jpg`, {
            type: 'image/jpeg'
        });
        
        processedImages.set(currentImageIndex, file);
        
        const thumbnail = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"] img`);
        if (thumbnail) {
            thumbnail.src = URL.createObjectURL(blob);
        }
        
        updateFileInput();
        cancelCrop();
    }, 'image/jpeg');
}

function cancelCrop() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    document.querySelector('.image-cropper').style.display = 'none';
}

function updateFileInput() {
    const dt = new DataTransfer();
    const sortedImages = Array.from(processedImages.entries())
        .sort(([a], [b]) => a - b)
        .map(([_, file]) => file);
    
    sortedImages.forEach(file => dt.items.add(file));
    document.getElementById('multipleImages').files = dt.files;
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const productName = document.getElementById('product_name').value.trim();
    const productNameRegex = /^[a-zA-Z0-9\s]{3,}$/;
    if (!productNameRegex.test(productName)) {
        displayErrorMessage('productName-error', 'Product name must be at least 3 characters long and contain only letters and numbers.');
        isValid = false;
    }
    

    const description = document.getElementById('descriptionid').value;
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

      const regularPrice = document.getElementsByName('regularPrice')[0].value;
      const priceRegex = /^-?\d+(\.\d{1,2})?$/;  // Allow optional negative sign

      if (!priceRegex.test(regularPrice)) {
          displayErrorMessage('regularPrice-error', 'Please enter a valid price (use a valid number format).');
          isValid = false;
        } else if (parseFloat(regularPrice) < 0) {
          displayErrorMessage('regularPrice-error', 'Please enter a valid price (negative numbers are not allowed).');
          isValid = false;
        } else if (parseFloat(regularPrice) <= 0) {
          displayErrorMessage('regularPrice-error', 'Please enter a price greater than zero.');
          isValid = false;
        }

        const salePrice = document.getElementsByName('salePrice')[0].value;
        if (!priceRegex.test(salePrice)) {
            displayErrorMessage('salePrice-error', 'Please enter a valid sale price.');
            isValid = false;
         } else if(parseFloat(salePrice) < 0){
            displayErrorMessage('salePrice-error', 'Please enter a valid price (negative numbers are not allowed).');
            isValid = false;
         }
         else if (parseFloat(salePrice) > parseFloat(regularPrice)) {
             displayErrorMessage('salePrice-error', 'Sale price cannot be greater than regular price.');
            isValid = false;
          }

    const quantity = document.getElementsByName('quantity')[0].value;
    const quantityRegex = /^[1-9][0-9]*$/; 
    if (!quantityRegex.test(quantity)) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity .');
        isValid = false;
    }

    const color = document.getElementsByName('color')[0].value;
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    const images = document.getElementById('multipleImages').files;

    if (images.length < 3) {
        displayErrorMessage('images-error', 'Please upload at least 3 images.');
        isValid = false;
     } else if (images.length > 3) {
        displayErrorMessage('images-error', 'Please upload no more than 3 images.');
        isValid = false;
     } else {
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
      for (let i = 0; i < images.length; i++) {
           const file = images[i];
            if (!validImageTypes.includes(file.type)) {
               displayErrorMessage('images-error', 'Please upload only image files (JPEG, PNG, GIF, WEBP).');
               isValid = false;
               break; 
            }
       }
    }
   return isValid;
}


function clearErrorMessages() {
       const errorElements = document.getElementsByClassName("error-message");
       for (let errorElement of errorElements) {
           errorElement.innerText = '';
           errorElement.style.display = 'none';
       }
   }

   function displayErrorMessage(elementId, message) {
       const errorElement = document.getElementById(elementId);
       errorElement.innerText = message;
       errorElement.style.display = 'block';
   }
  
</script>

//this is edit product in admin side 


<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.productName %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input placeholder="$" name="salePrice" type="text" class="form-control border" value="<%= product.salePrice %>">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="text" class="form-control border" value="<%= product.quantity %>">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border" value="<%= product.color %>">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% for (let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>" <%= cat[i]._id === product.category ? 'selected' : '' %> >
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="card-body">
                                <div id="thumbnailsContainer" class="thumbnails-container">
                                    <% for (let i = 0; i < product.productImage.length; i++) { %>
                                        <div class="thumbnail" data-index="<%= i %>">
                                            <img src="/uploads/cropped/<%= product.productImage[i] %>" onclick="startCropping('<%=product.productImage[i] %>', '<%= i %>')" />
                                            <span class="remove-icon" onclick="removeThumbnail(this.parentElement)">x</span>
                                        </div>
                                    <% } %>
                                </div>
                                <input class="form-control" type="file" name="images" id="multipleImages" 
                                       accept="image/png, image/jpeg, image/jpg" multiple 
                                       onchange="handleMultipleImages(event)">
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="image-cropper">
                            <div class="crop-container">
                                <img id="cropperImage" src="" alt="">
                            </div>
                            <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Save Crop</button>
                            <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
                        </div>
                         
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Update Product</button>
                        </div>
                        <input type="hidden" name="deletedImages" id="deletedImages">
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
let cropper = null;
let currentImageIndex = null;
const processedImages = new Map();
const maxImages = 3;
let deletedImages = [];

document.addEventListener('DOMContentLoaded', () => {
    initializeExistingImages();
});


function initializeExistingImages() {
    const thumbnailsContainer = document.getElementById('thumbnailsContainer');
    const existingThumbnails = thumbnailsContainer.querySelectorAll('.thumbnail');
    
    existingThumbnails.forEach((thumbnail, index) => {
        const imgElement = thumbnail.querySelector('img');
        const imgSrc = imgElement.src;
        const imgName = imgSrc.split('/').pop();
        
        processedImages.set(index, {
            type: 'existing',
            name: imgName,
            src: imgSrc
        });

        imgElement.onclick = () => startCropping(imgSrc, index);
        
        const removeBtn = thumbnail.querySelector('.remove-icon');
        removeBtn.onclick = (e) => {
            e.stopPropagation();
            removeThumbnail(thumbnail);
        };
    });
}


function handleMultipleImages(event) {
    const files = Array.from(event.target.files);
    const container = document.getElementById('thumbnailsContainer');
    const currentCount = container.querySelectorAll('.thumbnail').length;

    if (currentCount + files.length > maxImages) {
        displayErrorMessage('images-error', `You can only have ${maxImages} images in total.`);
        event.target.value = '';
        return;
    }

    files.forEach((file) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            const index = processedImages.size;
            addNewThumbnail(e.target.result, index, file);
        };
        reader.readAsDataURL(file);
    });

    event.target.value = '';
    clearErrorMessages();
}

function addNewThumbnail(src, index, file) {
    const container = document.getElementById('thumbnailsContainer');
    const div = document.createElement('div');
    div.className = 'thumbnail';
    div.setAttribute('data-index', index);

    const img = document.createElement('img');
    img.src = src;
    img.onclick = () => startCropping(src, index);

    const removeBtn = document.createElement('span');
    removeBtn.className = 'remove-icon';
    removeBtn.innerHTML = 'x';
    removeBtn.onclick = (e) => {
        e.stopPropagation();
        removeThumbnail(div);
    };

    div.appendChild(img);
    div.appendChild(removeBtn);
    container.appendChild(div);

    processedImages.set(index, {
        type: 'new',
        file: file,
        src: src
    });
}

function removeThumbnail(thumbnailDiv) {
    const index = parseInt(thumbnailDiv.getAttribute('data-index'));
    const imageData = processedImages.get(index);
    
    if (imageData && imageData.type === 'existing') {
        deletedImages.push(imageData.name);
    }
    
    processedImages.delete(index);
    thumbnailDiv.remove();
    reorderThumbnails();
}

function reorderThumbnails() {
    const container = document.getElementById('thumbnailsContainer');
    const thumbnails = container.getElementsByClassName('thumbnail');
    const tempMap = new Map();
    
    Array.from(thumbnails).forEach((thumbnail, newIndex) => {
        const oldIndex = parseInt(thumbnail.getAttribute('data-index'));
        thumbnail.setAttribute('data-index', newIndex);
        
        if (processedImages.has(oldIndex)) {
            tempMap.set(newIndex, processedImages.get(oldIndex));
        }
    });
    
    processedImages.clear();
    tempMap.forEach((value, key) => {
        processedImages.set(key, value);
    });
}

function startCropping(src, index) {
    currentImageIndex = index;
    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = src;
    
    document.querySelector('.image-cropper').style.display = 'block';
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1
    });
}

function saveCroppedImage() {
    if (!cropper) return;
    
    cropper.getCroppedCanvas().toBlob((blob) => {
        const file = new File([blob], `cropped-image-${currentImageIndex}.jpg`, {
            type: 'image/jpeg'
        });
        
        const imageData = processedImages.get(currentImageIndex);
        processedImages.set(currentImageIndex, {
            type: imageData.type,
            file: file,
            src: URL.createObjectURL(blob)
        });
        
        const thumbnail = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"] img`);
        if (thumbnail) {
            thumbnail.src = URL.createObjectURL(blob);
        }
        
        cancelCrop();
    }, 'image/jpeg');
}

function cancelCrop() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    document.querySelector('.image-cropper').style.display = 'none';
}

document.querySelector('form').onsubmit = function(e) {
    if (!validateForm()) {
        e.preventDefault();
        return false;
    }

    const formData = new FormData(this);
    
    formData.append('deletedImages', JSON.stringify(deletedImages));
    
    processedImages.forEach((imageData, index) => {
        if (imageData.type === 'new' || imageData.file) {
            formData.append('images', imageData.file);
        }
    });
    
    return true;
};

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const productName = document.getElementById('product_name').value;
    const productNameRegex = /^[a-zA-Z0-9\s]{3,}$/;
    if (!productNameRegex.test(productName)) {
        displayErrorMessage('productName-error', 'Product name must be at least 3 characters long and contain only letters and numbers.');
        isValid = false;
    }
    

    const description = document.getElementById('descriptionid').value;
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

      const regularPrice = document.getElementsByName('regularPrice')[0].value;
      const priceRegex = /^-?\d+(\.\d{1,2})?$/;  

      if (!priceRegex.test(regularPrice)) {
          displayErrorMessage('regularPrice-error', 'Please enter a valid price (use a valid number format).');
          isValid = false;
        } else if (parseFloat(regularPrice) < 0) {
          displayErrorMessage('regularPrice-error', 'Please enter a valid price (negative numbers are not allowed).');
          isValid = false;
        } else if (parseFloat(regularPrice) <= 0) {
          displayErrorMessage('regularPrice-error', 'Please enter a price greater than zero.');
          isValid = false;
        }

        const salePrice = document.getElementsByName('salePrice')[0].value;
        if (!priceRegex.test(salePrice)) {
            displayErrorMessage('salePrice-error', 'Please enter a valid sale price.');
            isValid = false;
         } else if(parseFloat(salePrice) < 0){
            displayErrorMessage('salePrice-error', 'Please enter a valid price (negative numbers are not allowed).');
            isValid = false;
         }
         else if (parseFloat(salePrice) > parseFloat(regularPrice)) {
             displayErrorMessage('salePrice-error', 'Sale price cannot be greater than regular price.');
            isValid = false;
          }

    const quantity = document.getElementsByName('quantity')[0].value;
    const quantityRegex = /^[1-9][0-9]*$/; 
    if (!quantityRegex.test(quantity)) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity .');
        isValid = false;
    }

    const color = document.getElementsByName('color')[0].value;
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    const totalImages = processedImages.size;
    if (totalImages === 0) {
        displayErrorMessage('images-error', 'Please upload at least one image.');
        isValid = false;
    } else if (totalImages > maxImages) {
        displayErrorMessage('images-error', `Maximum ${maxImages} images allowed.`);
        isValid = false;
    }

    return isValid;
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    for (let errorElement of errorElements) {
        errorElement.innerText = '';
        errorElement.style.display = 'none';
    }
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = 'block';
}
</script>

//this is product model
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true,
    },
    description: {
        type: String,
        required: true,
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
    },
    regularPrice: {
        type: Number,
        required: true,
    },
    salePrice: {
        type: Number,
        required: true,
    },
    quantity: {
        type: Number,
        default: 0,  
    },
    color: {
        type: String,
    },
    productImage: {
        type: [String],
    },
    isBlocked: {
        type: Boolean,
        default: false,
    },
    status: {
        type: String,
        enum: ['Available', 'Out of Stock'],
        default: 'Available',
    },
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);

module.exports = Product;

