//this is admin order details 
<div class="main-panel">
  <div class="content-wrapper col-lg-12">
    <div class="order-container">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="section">Order Details</h3>
        <div class="d-flex gap-3">
          <button class="cancel-all-btn" onclick="cancelAllProducts('<%= order.orderId %>')">
            Cancel All Products
          </button>
          <button class="btn-back" onclick="location.href='/admin/orderList'">
            Back to Orders
          </button>
        </div>
      </div>

      <div class="order-details-wrapper">
        <div class="details-card order-summary">
          <p><strong>Order ID:</strong> <%= order.orderId %></p>
          <p><strong>Order Date:</strong> <%= order.orderDate %></p>
          <p>
            <strong>Total Amount:</strong> 
            ₹ <%= order.totalAmount %>
            <% if (order.items.some(item => item.highestDiscount > 0)) { %>
                <span style="color: green; margin-left: 10px;">
                    (Offer Applied)
                </span>
            <% } %>
        </p>
          <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
          <p><strong>Payment Status:</strong> <%= order.paymentStatus %></p>
          <p><strong>Customer Name:</strong> <%= order.customer.name %></p>
          
          <div class="status-controls">
            <label for="order-status"><strong>Order Status:</strong></label>
            <select 
              id="order-status" 
              class="status-dropdown"
              onchange="updateAllProductsStatus('<%= order.orderId %>', this.value)"
            >
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Delivered">Delivered</option>
            </select>
          </div>
        </div>

        <div class="details-card delivery-address">
            <div class="section-title">Delivery Address</div>
            <p><strong>Name:</strong> <%= order.address.name %></p>
            <p><strong>Email:</strong> <%= order.customer.email %></p>
            <p><strong>Mobile:</strong> <%= order.address.phone %></p>
            <p><strong>Address:</strong> <%= order.address.house %>, <%= order.address.city %>, <%= order.address.district %>, <%= order.address.state %>, <%= order.address.pincode %></p>
          </div>
      </div>

     <div class="order-items">
        <div class="section-title">Items</div>

        <% order.items.forEach(item => { %>
          <div class="order-item-card">
            <div class="order-item-image">
              <img src="<%= item.image %>" alt="<%= item.productName %>" onerror="this.src='/placeholder-image.jpg'" />
              <h4 class="product-name"><%= item.productName %></h4>
            </div>

            <div class="order-item-details">
              <p><strong>Category:</strong> <%= item.category %></p>
              <p><strong>Quantity:</strong> <%= item.quantity %></p>
              <p>
                <strong>Price:</strong> 
                <% if (item.highestDiscount > 0) { %>
                  <span style="text-decoration: line-through;">₹<%= item.price %></span>
                  <span style="color: green;">₹<%= item.offerPrice %> (<%= item.highestDiscount %>% off)</span>
                <% } else { %>
                  ₹<%= item.price %>
                <% } %>
              </p>
              <p><strong>Final Price:</strong> ₹ <%= item.finalPrice %></p>
              <p><strong>Status:</strong> <span id="status-text-<%= item.productId %>"><%= item.status %></span></p>
              
              <% if (item.status !== 'Cancelled') { %>
                <button 
                  class="cancel-product-btn"
                  onclick="cancelProduct('<%= order.orderId %>', '<%= item.productId %>')"
                >
                  Cancel Product
                </button>
              <% } %>
            </div>
          </div>
        <% }); %>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
   document.addEventListener('DOMContentLoaded', function() {
    const orderStatus = document.getElementById('order-status');
    const currentStatus = '<%= order.items[0].status %>'; // Assuming all items have same status
    orderStatus.value = currentStatus;
    updateStatusDropdownOptions(currentStatus);
  });

  function updateStatusDropdownOptions(currentStatus) {
    const orderStatus = document.getElementById('order-status');
    const options = orderStatus.options;

    for (let option of options) {
      if (currentStatus === 'Processing') {
        option.disabled = option.value === 'Delivered';
      } else if (currentStatus === 'Shipped') {
        option.disabled = option.value === 'Processing';
      } else if (currentStatus === 'Delivered') {
        orderStatus.disabled = true;
      }
    }
  }

  async function updateAllProductsStatus(orderId, status) {
    try {
      const response = await fetch('/admin/updateAllProductsStatus', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId,
          status
        })
      });

      const data = await response.json();
      
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Order status updated successfully',
          confirmButtonText: 'OK'
        }).then(() => {
          location.reload();
        });
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to update status',
        confirmButtonText: 'Try Again'
      });
    }
  }

  async function cancelProduct(orderId, productId) {
    try {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You want to cancel this product?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
      });

      if (result.isConfirmed) {
        const response = await fetch('/admin/updateOrderStatus', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId,
            productId,
            status: 'Cancelled'
          })
        });

        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Product cancelled successfully',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message);
        }
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to cancel product',
        confirmButtonText: 'Try Again'
      });
    }
  }

  async function cancelAllProducts(orderId) {
    try {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You want to cancel all products in this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel all!'
      });

      if (result.isConfirmed) {
        const response = await fetch('/admin/cancelAllProducts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ orderId })
        });

        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'All products cancelled successfully',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message);
        }
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to cancel products',
        confirmButtonText: 'Try Again'
      });
    }
  }
    </script>

<script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
<script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
<script src="/assets/js/vendors/select2.min.js"></script>
<script src="/assets/js/vendors/perfect-scrollbar.js"></script>
<script src="/assets/js/vendors/jquery.fullscreen.min.js"></script>
<script src="/assets/js/vendors/chart.js"></script>
<script src="/assets/js/main.js?v=1.1" type="text/javascript"></script>
<script src="/assets/js/custom-chart.js" type="text/javascript"></script>
//this is admin controller 

const Admin = require("../../models/adminModel");
const Order = require('../../models/orderModel');
const User = require('../../models/userModel');
const Product = require("../../models/productModel");
const Offer = require("../../models/offerModel")

//orderlist
const loadOrdersList = async (req, res) => {
  try {
    const { search = '', page = 1 } = req.query; 
    const limit = 5; 
    const skip = (page - 1) * limit;

    const searchTerm = search.trim();

    let orders = [];
    let totalOrders = 0;

    if (searchTerm) {
      const matchingUsers = await User.find({
        name: { $regex: searchTerm, $options: 'i' }
      }).select('_id');

      const userIds = matchingUsers.map(user => user._id);

      const searchCriteria = {
        $or: [
          { orderId: { $regex: searchTerm, $options: 'i' } },
          { paymentMethod: { $regex: searchTerm, $options: 'i' } },
          { paymentStatus: { $regex: searchTerm, $options: 'i' } },
          { orderStatus: { $regex: searchTerm, $options: 'i' } },
          { userId: { $in: userIds } } 
        ]
      };

      totalOrders = await Order.countDocuments(searchCriteria);

      orders = await Order.find(searchCriteria)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .lean();
  } else {
    totalOrders = await Order.countDocuments();
      orders = await Order.find()
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .lean();
    }

    const formattedOrders = await Promise.all(
      orders.map(async (order) => {


        const customerName = await getCustomerName(order.userId);

        const hasReturnRequest = order.items.some(item => 
          item.returnStatus && 
          ['Return Requested', 'Return Accepted'].includes(item.returnStatus)
        );
        return {
          _id: order._id,
          orderId: order.orderId,
          orderDate: new Date(order.createdAt).toLocaleDateString('en-GB'),
          customerName: customerName || "Unknown Customer",
          totalPrice: order.totalPrice.toFixed(2),
          paymentMethod: order.paymentMethod,
          orderStatus: order.orderStatus,
          paymentStatus: order.paymentStatus,
          hasReturnRequest: hasReturnRequest,
          returnItems: order.items.filter(item =>
            item.returnStatus && 
            ['Return Requested', 'Return Accepted'].includes(item.returnStatus)
          ).map(item => ({
            ...item,
            // Add a display status for more user-friendly representation
            returnDisplayStatus: item.returnStatus === 'Return Accepted' ? 'Accepted' : 
                                  item.returnStatus === 'Return Rejected' ? 'Rejected' : 
                                  'Requested'
          }))
        };
      })
    );

    const pagination = {
      totalPages: Math.ceil(totalOrders / limit),
      currentPage: Number(page),
      hasNextPage: Number(page) < Math.ceil(totalOrders / limit),
      hasPrevPage: Number(page) > 1,
      nextPage: Number(page) + 1,
      prevPage: Number(page) - 1,
      totalOrders: totalOrders,
      ordersPerPage: limit,
      startOrder: skip + 1,
      endOrder: Math.min(skip + limit, totalOrders)
    };
    res.render('orders', { orders: formattedOrders , pagination, search:searchTerm });
  } catch (error) {
    console.error('Error in loadOrdersList:', error);
    res.status(500).render('error', {
      message: 'An error occurred while fetching the orders list',
      error: process.env.NODE_ENV === 'development' ? error : {}
    });
  }
};

async function getCustomerName(userId) {
  try {
    const user = await User.findById(userId).select('name');
    return user ? user.name:'Unknown Customer';
  } catch (error) {
    console.error('Error fetching customer name:', error);
    return null;
  }
};

//orderdetails page 
const adminOrderDetails = async (req, res) => {
  try {
      const { orderId } = req.params;
      
      const currentDate = new Date();
      const offers = await Offer.find({
          status: 'Active',
          expireDate: { $gt: currentDate }
      });

      const order = await Order.findOne({ orderId })
          .populate({
              path: 'items.productId',
              model: 'Product',
              populate: {
                  path: 'category',
                  model: 'Category',
                  select: 'name'
              },
              select: 'productName category productImage isBlocked'
          });

      if (!order) {
          return res.status(404).render('error', {
              message: 'Order not found',
              error: { status: 404 }
          });
      }

      const customer = await User.findById(order.userId).select('name email phone');

      const formattedOrder = {
          orderId: order.orderId,
          orderDate: new Date(order.createdAt).toLocaleDateString('en-GB'),
          paymentMethod: order.paymentMethod,
          paymentStatus: order.paymentStatus,
          customer: {
              name: customer?.name || 'Unknown Customer',
              email: customer?.email || 'N/A',
              phone: customer?.phone || 'N/A'
          },
          address: order.address,
          items: order.items.map(item => {
              const productOffer = offers.find(offer => 
                  (offer.productIds?.includes(item.productId?._id)) ||
                  (offer.categoryIds?.includes(item.productId?.category))
              );

              const highestDiscount = productOffer ? productOffer.discount : 0;
              const offerPrice = productOffer 
                  ? item.price * (1 - productOffer.discount / 100)
                  : item.price;
              
              // Calculate final price with offer
              const finalPrice = productOffer 
                  ? item.quantity * offerPrice 
                  : item.finalPrice;

              return {
                  productId: item.productId?._id || '',
                  productName: item.productId?.productName || 'Product Unavailable',
                  category: item.productId?.category?.name || 'Uncategorized',
                  image: item.productId?.productImage?.[0] 
                      ? `/uploads/cropped/${item.productId.productImage[0]}` 
                      : '/placeholder-image.jpg',
                  quantity: item.quantity,
                  price: item.price.toFixed(2),
                  offerPrice: offerPrice.toFixed(2),
                  highestDiscount,
                  finalPrice: finalPrice.toFixed(2),
                  status: item.itemStatus,
                  isAvailable: !item.productId?.isBlocked
              };
          }),
          // Calculate total with offer prices
          totalAmount: order.items.reduce((total, item) => {
              const productOffer = offers.find(offer => 
                  (offer.productIds?.includes(item.productId?._id)) ||
                  (offer.categoryIds?.includes(item.productId?.category))
              );

              const offerPrice = productOffer 
                  ? item.price * (1 - productOffer.discount / 100)
                  : item.price;
              
              return total + (item.quantity * offerPrice);
          }, 0).toFixed(2)
      };

      res.render('adminOrderDetails', { order: formattedOrder });

  } catch (error) {
      console.error('Error in adminOrderDetails:', error);
      res.status(500).render('error', {
          message: 'An error occurred while fetching order details',
          error: process.env.NODE_ENV === 'development' ? error : {}
      });
  }
};


module.exports={
   
    loadOrdersList,
    adminOrderDetails,
}
//this is order view ejs 
<%- include('../layoutsAdmin/adminheader') %> 
<%- include('../layoutsAdmin/header') %>

<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f4f7fc;
    margin: 0;
    padding: 0;
  }

  .container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 15px;
    font-size: 2rem;
  }

  .search-bar {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
  }

  .search-bar input {
    padding: 8px;
    width: 300px;
    border-radius: 5px;
    border: 1px solid #ccc;
    margin-right: 10px;
    font-size: 1rem;
  }

  .search-bar button {
    padding: 8px 16px;
    background-color: rgb(176, 176, 176);
    color: black;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
  }

  .search-bar button:hover {
    background-color: #45a049;
  }

  .order-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    border: 1px solid #ddd;
    border-radius: 8px;
  }

  .order-table th,
  .order-table td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #ddd;
  }

  .order-table th {
    background-color: #364453;
    color: white; 
    font-weight: bold;
  }

  .order-table tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  .order-table tr:hover {
    background-color: #f1f1f1;
  }

  .order-table td a {
    display: inline-block;
    padding: 8px 15px;
    background-color: #4caf50;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
  }

  .order-table td a:hover {
    background-color: #45a049;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin-top: 20px;
  }

  .pagination a {
    padding: 8px 12px;
    text-decoration: none;
    border: 1px solid #ddd;
    color: #333;
    background-color: #fff;
    border-radius: 5px;
    font-size: 1rem;
  }

  .pagination a.active {
    background-color: #4caf50;
    color: white;
    border: 1px solid #4caf50;
  }

  .pagination a:hover {
    background-color: #ddd;
  }

  .pagination a:disabled {
    color: #ccc;
    cursor: not-allowed;
  }

  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .return-column {
    padding: 8px;
    text-align: center;
  }

  .return-btn {
    padding: 6px 12px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
  }
  .return-btn:hover {
    background-color: #0056b3;
  }
  .badge {
  padding: 6px 12px;
  font-size: 0.9em;
  font-weight: normal;
  border-radius: 4px;
}

.bg-success {
  background-color: #28a745;
  color: white;
}

.bg-danger {
  background-color: #dc3545;
  color: white;
}
</style>

<div class="container">
  <h1>Orders List</h1>
  <form class="search-bar" method="GET" action="/admin/orderList">
    <input
      type="text"
      name="search"
      id="search"
      placeholder="Search orders..."
      value="<%= search || '' %>"
    />
    <button type="submit">Search</button>
  </form>

  <% if (orders.length > 0) { %>
  <div class="order-info">
    Showing orders <%= pagination.startOrder %> to <%= pagination.endOrder %> of
    <%= pagination.totalOrders %> orders
  </div>
  <% } %>

  <div class="order-box">
    <table class="order-table">
      <thead>
        <tr>
          <th>Order ID</th>
          <th>Order Date</th>
          <th>Customer</th>
          <th>Total Price</th>
          <th>Payment Status</th>
          <th>Payment</th>
          <th>Order Status</th>
          <th>Return Info</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody>
        <% if (orders.length > 0) { %> <% orders.forEach(order => { %>
        <tr>
          <td><%= order.orderId %></td>
          <td><%= order.orderDate %></td>
          <td><%= order.customerName %></td>
          <td>₹<%= order.totalPrice %></td>
          <td><%= order.paymentMethod %></td>
          <td><%= order.paymentStatus %></td>
          <td><%= order.orderStatus %></td>
          <td class="return-column">
            <% if (order.hasReturnRequest) { %>
              <% if (order.returnItems.length > 0) { %>
                <% if (order.returnItems.some(item => item.returnDisplayStatus === 'Accepted')) { %>
                  <span class="badge bg-success">Accepted</span>
                <% } else if (order.returnItems.some(item => item.returnDisplayStatus === 'Rejected')) { %>
                  <span class="badge bg-danger">Rejected</span>
                <% } else { %>
                  <button class="return-btn" 
                          data-order-id="<%= order.orderId %>" 
                          data-return-items="<%= JSON.stringify(order.returnItems) %>"
                          data-full-order-id="<%= order._id %>">
                    View Return
                  </button>
                <% } %>
              <% } %>
            <% } else { %>
              No Return Request
            <% } %>
          </td>
          <td><a href="/admin/orderDetails/<%= order.orderId %>" class="btn btn-sm btn-info">View</a></td>
        </tr>
        <% }) %> 
        <% } else { %>
        <tr>
          <td colspan="9" style="text-align: center">No orders found</td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <% if (pagination.totalPages > 1) { %>
  <div class="pagination-container">
    <% if (pagination.hasPrevPage) { %>
    <a
      class="page-link"
      href="?page=<%= pagination.prevPage %>&search=<%= search %>"
      >Previous</a
    >
    <% } %> <% for (let i = 1; i <= pagination.totalPages; i++) { %>
    <a
      class="page-link <%= i === pagination.currentPage ? 'active' : '' %>"
      href="?page=<%= i %>&search=<%= search %>"
      ><%= i %></a
    >
    <% } %> <% if (pagination.hasNextPage) { %>
    <a
      class="page-link"
      href="?page=<%= pagination.nextPage %>&search=<%= search %>"
      >Next</a
    >
    <% } %>
  </div>
  <% } %>
</div>

<div class="modal fade" id="returnDetailsModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Return Request Details</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="returnDetailsContent">
        <!-- Return details will be loaded here dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-success" id="acceptReturnBtn">Accept</button>
        <button type="button" class="btn btn-danger" id="rejectReturnBtn">Reject</button>
      </div>
    </div>
  </div>
</div>
<script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
<script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>

<script>
  $(document).ready(function() {
    let currentReturnItems = [];
    let currentFullOrderId = '';

    $('.return-btn').on('click', function() {
      const orderId = $(this).data('order-id');
      const fullOrderId = $(this).data('full-order-id');
      currentReturnItems = $(this).data('return-items');

      console.log('Original Order ID:', orderId);
      console.log('Full Order ID:', fullOrderId);
      console.log('Return Items:', currentReturnItems);


      if (!currentReturnItems || currentReturnItems.length === 0) {
         console.error('No return items found');
         return;
       }

       currentFullOrderId = fullOrderId;

      let returnDetailsHtml = `<p><strong>Order ID:</strong> ${orderId}</p>`;
      returnDetailsHtml += '<table class="table">';
      returnDetailsHtml += '<thead><tr><th>Product</th><th>Reason</th></tr></thead>';
      returnDetailsHtml += '<tbody>';

      currentReturnItems.forEach(item => {
        returnDetailsHtml += `
          <tr>
            <td>${item.productName}</td>
            <td>${item.returnReason || 'No reason provided'}</td>
            <td>${item.returnStatus}</td>
          </tr>
        `;
      });

      returnDetailsHtml += '</tbody></table>';
      
      $('#returnDetailsContent').html(returnDetailsHtml);
      $('#returnDetailsModal').modal('show');
    });

    $('#acceptReturnBtn, #rejectReturnBtn').on('click', function() {
      const status = $(this).attr('id') === 'acceptReturnBtn' ? 'Accepted' : 'Rejected';
      
        $.ajax({
          url: '/admin/updateReturnStatus',
          method: 'POST',
          data: { 
            fullOrderId: currentFullOrderId, 
            returnItems: currentReturnItems, 
            status: status 
          },
          success: function(response) {
            if (response.success) {
              $('#returnDetailsModal').modal('hide');
              location.reload();
            } else {
              alert(response.message);
            }
          },
          error: function(xhr) {
        console.error(xhr);
        alert(xhr.responseJSON?.message || 'Failed to update return status');
      }
        });
      });
    })
  </script>

<script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
<script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
<script src="/assets/js/vendors/select2.min.js"></script>
<script src="/assets/js/vendors/perfect-scrollbar.js"></script>
<script src="/assets/js/vendors/jquery.fullscreen.min.js"></script>
<script src="/assets/js/vendors/chart.js"></script>
<script src="/assets/js/main.js?v=1.1" type="text/javascript"></script>
<script src="/assets/js/custom-chart.js" type="text/javascript"></script>
