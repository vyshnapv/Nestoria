//this is my editProduct offer page 
<%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
    <style>
        /* Reusing same styles as productOffer.ejs for consistency */
        :root {
            --primary-color: rgb(66, 168, 66);
            --primary-hover: #375336;
            --secondary-color: #64748b;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8fafc;
            color: #1e293b;
            font-size: 14px;
        }

        .container {
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
            max-height: 100vh;
            padding: 10px;
        }

        h1 {
            color: #1e293b;
            margin: 0 0 15px 0;
            font-size: 33px;
            font-weight: 600;
            padding-top: 5px;
        }

        .back-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 6px 12px;
            background-color: rgb(92, 117, 158);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            font-size: 14px;
        }

        .back-btn:hover {
            background-color: #776fbb;
            color: white;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 0 15px;
        }

        .form-row {
            padding: 8px;
            background: #f8fafc;
            border-radius: 6px;
        }

        .form-row:nth-child(1) input,
        .form-row:nth-child(2) input {
           max-width: 500px;
           width: 100%;
        }

        label {
            font-weight: 500;
            color: #475569;
            flex: 1;
            font-size: 14px;
        }

        input[type="text"],
        input[type="number"],
        input[type="date"] {
            flex: 2;
            padding: 7px 8px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            width: 100%;
            font-size: 14px;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        input[type="date"]:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 1px rgba(79, 70, 229, 0.1);
        }

        .two-columns {
            display: flex;
            justify-content: space-between;
            gap: 15px;
            margin: 10px 0;
        }

        .column {
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
            flex: 1;
        }

        .search-container {
            position: relative;
            margin-bottom: 6px;
        }

        .search-container .clear-btn {
            position: absolute;
            right: 4px;
            top: 50%;
            transform: translateY(-50%);
            padding: 2px 6px;
            font-size: 15px;
            background: #e2e8f0;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .product-list {
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid #e2e8f0;
            padding: 12px;
            border-radius: 4px;
            background: white;
            margin-top: 10px;
        }

        .product-list label {
            display: flex;
            align-items: center;
            padding: 3px;
            margin: 1px 0;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .product-list label:hover {
            background: #f1f5f9;
        }

        .product-list input[type="checkbox"] {
            margin-right: 6px;
            width: 12px;
            height: 12px;
            border-radius: 2px;
            border: 1px solid #94a3b8;
        }

        .right-column-content {
            display: flex;
            flex-direction: column;
            gap: 10px;
            height: 100%;
        }

        .date-container {
            margin-bottom: 10px;
        }

        .selected-products {
            flex-grow: 1;
            background: white;
            padding: 8px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            height: calc(100% - 60px);
            overflow-y: auto;
            margin-top: 8px;
        }

        .selected-products div {
            margin-top: 6px;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }

        .tag {
            background: var(--primary-color);
            color: white;
            padding: 3px 6px;
            border-radius: 3px;
            font-size: 13px;
        }

        .form-actions {
            margin-top: -20px;
            padding-bottom: 10px;
        }

        .update-btn {
            padding: 8px 30px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            font-size: 15px;
        }

        .update-btn:hover {
            background-color: var(--primary-hover);
        }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
        }

        .product-error {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
            padding-left: 8px;
        }

        @media (max-width: 768px) {
            .container {
                margin: 20px;
                padding: 20px;
            }

            .two-columns {
                flex-direction: column;
                gap: 8px;
            }

            .form-row {
                flex-direction: column;
                align-items: stretch;
                padding: 6px;
            }

            form {
                padding: 0;
            }
        }
    </style>
    
    <div class="container">
        <a href="/admin/offerManagement" class="back-btn">‚Üê Back to offerPage</a>
        <h1>Edit Product Offer</h1>
        <form id="editProductOfferForm">
            <div class="form-row">
                <label for="offerName">Offer Name:</label>
                <input type="text" id="offerName" name="offerName" value="<%= offer.offerName %>" >
                <span class="error-message" id="offerNameError"></span>
            </div>
            
            <div class="form-row">
                <label for="discountPercentage">Discount Percentage:</label>
                <input type="number" id="discountPercentage" name="discountPercentage" min="0" max="50" value="<%= offer.discount %>">
                <span class="error-message" id="discountError"></span>
            </div>
    
            <div class="form-row two-columns">
                <div class="column">
                    <label for="products">Select Products (Multiple)</label>
                    <div class="search-container">
                        <input type="text" id="searchProducts" placeholder="Search products...">
                        <button type="button" class="clear-btn">Clear</button>
                    </div>
                    <div class="product-list">
                        <% if (products && products.length > 0) { %>
                            <% products.forEach(function(product) { %>
                                <label class="product-item">
                                    <input type="checkbox" name="selectedProducts" value="<%= product._id %>" 
                                    <%= offer.productIds.some(p => p._id.toString() === product._id.toString()) ? 'checked' : '' %>>
                                    <%= product.productName %>
                                </label>
                            <% }); %>
                        <% } else { %>
                            <p>No products available for offer</p>
                        <% } %>
                    </div>
                    <span class="error-message" id="productError"></span>
                </div>
    
                <div class="column">
                    <div class="right-column-content">
                        <div class="date-container">
                            <label for="expiryDate">Expiry Date</label>
                            <input type="date" id="expiryDate" name="expiryDate" value="<%= offer.expireDate.toISOString().split('T')[0] %>">
                            <span class="error-message" id="dateError"></span>
                        </div>
                        
                        <div class="selected-products">
                            <label>Selected Products</label>
                            <div class="selected-items"></div>
                        </div>
                    </div>
                </div>
            </div>
    
            <div class="form-actions">
                <button type="submit" class="update-btn">Update Product Offer</button>
            </div>
        </form>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('editProductOfferForm');
            const searchInput = document.getElementById('searchProducts');
            const clearBtn = document.querySelector('.clear-btn');
            const productList = document.querySelector('.product-list');
            const selectedProductsDiv = document.querySelector('.selected-items');
    
            // Set minimum date for expiry
            const expiryDateInput = document.getElementById('expiryDate');
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            expiryDateInput.min = tomorrow.toISOString().split('T')[0];
    
            // Update selected products display initially
            updateSelectedProducts();
    
            // Live validation for offer name
            document.getElementById('offerName').addEventListener('input', function() {
                const error = document.getElementById('offerNameError');
                if (this.value.trim().length < 3) {
                    error.textContent = 'Offer name must be at least 3 characters long';
                } else {
                    error.textContent = '';
                }
            });
    
            // Live validation for discount percentage
            document.getElementById('discountPercentage').addEventListener('input', function() {
                const error = document.getElementById('discountError');
                const value = parseFloat(this.value);
                if (isNaN(value) || value < 0 || value > 50) {
                    error.textContent = 'Discount must be between 0 and 50';
                } else {
                    error.textContent = '';
                }
            });
    
            // Live validation for expiry date
            expiryDateInput.addEventListener('input', function() {
                const error = document.getElementById('dateError');
                if (!this.value) {
                    error.textContent = 'Please select an expiry date';
                } else {
                    error.textContent = '';
                }
            });
    
            // Live validation for products
            productList.addEventListener('change', function(e) {
               if (e.target.type === 'checkbox') {
                   updateSelectedProducts();
               }
            });
    
            // Search functionality for product list
            searchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const products = productList.querySelectorAll('label');
    
                products.forEach(product => {
                    const productName = product.textContent.toLowerCase();
                    product.style.display = productName.includes(searchTerm) ? '' : 'none';
                });
            });
    
            // Clear search functionality
            clearBtn.addEventListener('click', function() {
                searchInput.value = '';
                const products = productList.querySelectorAll('label');
                products.forEach(product => product.style.display = '');
            });
    
            // Update selected products display
            function updateSelectedProducts() {
               selectedProductsDiv.innerHTML = '';
               const checkedBoxes = productList.querySelectorAll('input[name="selectedProducts"]:checked');

               checkedBoxes.forEach(checkbox => {
                   const productName = checkbox.parentElement.textContent.trim();
                   const span = document.createElement('span');
                   span.className = 'tag';
                   span.textContent = productName;

                   const removeBtn = document.createElement('button');
                   removeBtn.className = 'remove-tag';
                   removeBtn.style.cssText = 'margin-left: 5px; border: none; background: none; color: white; cursor: pointer;';
                   removeBtn.innerHTML = '√ó';
                   removeBtn.onclick = function(e) {
                        e.preventDefault();
                        checkbox.checked = false;
                        updateSelectedProducts();
                    };

                  span.appendChild(removeBtn);
                  selectedProductsDiv.appendChild(span);
                });
            }

            updateSelectedProducts();
    
            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
    
                // Reset error messages
                document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
    
                const offerName = document.getElementById('offerName').value;
                const discountPercentage = document.getElementById('discountPercentage').value;
                const expiryDate = document.getElementById('expiryDate').value;
                const selectedProducts = Array.from(
                    document.querySelectorAll('input[name="selectedProducts"]:checked')
                ).map(checkbox => checkbox.value);
    
                let isValid = true;
    
                if (!offerName || offerName.trim().length < 3) {
                    document.getElementById('offerNameError').textContent = 'Offer name must be at least 3 characters long';
                    isValid = false;
                }
    
                if (!discountPercentage || discountPercentage < 0 || discountPercentage > 50) {
                    document.getElementById('discountError').textContent = 'Discount must be between 0 and 50';
                    isValid = false;
                }
    
                if (!expiryDate) {
                    document.getElementById('dateError').textContent = 'Please select an expiry date';
                    isValid = false;
                }
    
                if (selectedProducts.length === 0) {
                    document.getElementById('productError').textContent = 'Please select at least one product';
                    isValid = false;
                }
    
                if (!isValid) return;
    
                try {
                    const response = await fetch('/admin/updateProductOffer/<%= offer._id %>', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            offerName,
                            discountPercentage,
                            selectedProducts,
                            expiryDate
                        })
                    });
    
                    const data = await response.json();
    
                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message
                        });
                        window.location.href = '/admin/offerManagement';
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to update offer'
                    });
                }
            });
        });
    </script>
    
    //this is my  category offer page 
    <%- include('../layoutsAdmin/adminheader') %>
<%- include('../layoutsAdmin/header') %>
    <style>
        :root {
            --primary-color: rgb(66, 168, 66);
            --primary-hover: #375336;
            --secondary-color: #64748b;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8fafc;
            color: #1e293b;
            font-size: 14px;
        }

        .container {
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
            max-height: 100vh;
            padding: 10px;
        }

        h1 {
            color: #1e293b;
            margin: 0 0 15px 0;
            font-size: 33px;
            font-weight: 600;
            padding-top: 5px;
        }

        .back-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 6px 12px;
            background-color: rgb(92, 117, 158);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            font-size: 14px;
        }

        .back-btn:hover {
            background-color: #776fbb;
            color: white;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 0 15px;
        }

        .form-row {
            padding: 8px;
            background: #f8fafc;
            border-radius: 6px;
        }

        .form-row:nth-child(1) input,
        .form-row:nth-child(2) input {
            max-width: 500px;
            width: 100%;
        }

        label {
            font-weight: 500;
            color: #475569;
            flex: 1;
            font-size: 14px;
        }

        input[type="text"],
        input[type="number"],
        input[type="date"] {
            flex: 2;
            padding: 7px 8px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            width: 100%;
            font-size: 14px;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        input[type="date"]:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 1px rgba(79, 70, 229, 0.1);
        }

        .two-columns {
            display: flex;
            justify-content: space-between;
            gap: 15px;
            margin: 10px 0;
        }

        .column {
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
            flex: 1;
        }

        .search-container {
            position: relative;
            margin-bottom: 6px;
        }

        .search-container .clear-btn {
            position: absolute;
            right: 4px;
            top: 50%;
            transform: translateY(-50%);
            padding: 2px 6px;
            font-size: 15px;
            background: #e2e8f0;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .category-list {
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid #e2e8f0;
            padding: 12px;
            border-radius: 4px;
            background: white;
            margin-top: 10px;
        }

        .category-list label {
            display: flex;
            align-items: center;
            padding: 3px;
            margin: 1px 0;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .category-list label:hover {
            background: #f1f5f9;
        }

        .category-list input[type="checkbox"] {
            margin-right: 6px;
            width: 12px;
            height: 12px;
            border-radius: 2px;
            border: 1px solid #94a3b8;
        }

        .right-column-content {
            display: flex;
            flex-direction: column;
            gap: 10px;
            height: 100%;
        }

        .date-container {
            margin-bottom: 10px;
        }

        .selected-categories {
            flex-grow: 1;
            background: white;
            padding: 8px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            height: calc(100% - 60px);
            overflow-y: auto;
            margin-top: 8px;
        }

        .selected-categories div {
            margin-top: 6px;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }

        .tag {
            background: var(--primary-color);
            color: white;
            padding: 3px 6px;
            border-radius: 3px;
            font-size: 13px;
        }

        .form-actions {
            margin-top: -20px;
            padding-bottom: 10px;
        }

        .create-btn {
            padding: 8px 30px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            font-size: 15px;
        }

        .create-btn:hover {
            background-color: var(--primary-hover);
        }

        @media (max-width: 768px) {
            .container {
                margin: 20px;
                padding: 20px;
            }

            .two-columns {
                flex-direction: column;
                gap: 8px;
            }

            .form-row {
                flex-direction: column;
                align-items: stretch;
                padding: 6px;
            }
            form {
                padding: 0;
            }
        }
        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
        }
        
        .category-error {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
            padding-left: 8px;
        }
    </style>

<div class="container">
    <a href="/admin/offerManagement" class="back-btn">‚Üê Back to Offer Management</a>
    <h1>Create Category Offer</h1>
    
    <form id="categoryOfferForm">
        <div class="form-row">
            <label for="offerName">Offer Name:</label>
            <input type="text" id="offerName" name="offerName" placeholder="Enter offer name" >
            <span class="error-message" id="offerNameError"></span>
        </div>
        
        <div class="form-row">
            <label for="discountPercentage">Discount Percentage:</label>
            <input type="number" id="discountPercentage" name="discountPercentage" min="0" max="50" placeholder="Enter percentage (0-50)">
            <span class="error-message" id="discountError"></span>
        </div>

        <div class="form-row two-columns">
            <div class="column">
                <label for="categories">Select Categories</label>
                <div class="search-container">
                    <input type="text" id="searchCategories" placeholder="Search categories...">
                    <button type="button" class="clear-btn">Clear</button>
                </div>
                <div class="category-list">
                    <% if (categories && categories.length > 0) { %>
                        <% categories.forEach(category => { %>
                            <label>
                                <input type="checkbox" name="selectedCategories" value="<%= category._id %>">
                                <%= category.name %>
                            </label>
                        <% }); %>
                    <% } else { %>
                        <p>No categories available for offers</p>
                    <% } %>
                </div>
                <span class="category-error" id="categoryError"></span>
            </div>

            <div class="column">
                <div class="right-column-content">
                    <div class="date-container">
                        <label for="expiryDate">Expiry Date</label>
                        <input type="date" id="expiryDate" name="expiryDate" placeholder="YYYY-MM-DD">
                        <span class="error-message" id="dateError"></span>
                    </div>
                    
                    <div class="selected-categories">
                        <label>Selected Categories</label>
                        <div></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="create-btn">Create Category Offer</button>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchCategories');
        const clearButton = document.querySelector('.clear-btn');
        const categoryList = document.querySelector('.category-list');
        const selectedCategoriesDiv = document.querySelector('.selected-categories div');
        const form = document.getElementById('categoryOfferForm');

        const expiryDateInput = document.getElementById('expiryDate');
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        expiryDateInput.min = tomorrow.toISOString().split('T')[0];
        

        document.getElementById('offerName').addEventListener('input', function() {
            const error = document.getElementById('offerNameError');
            if (this.value.trim().length < 3) {
                error.textContent = 'Offer name must be at least 3 characters long';
            } else {
                error.textContent = '';
            }
        });

        document.getElementById('discountPercentage').addEventListener('input', function() {
            const error = document.getElementById('discountError');
            const value = parseFloat(this.value);
            if (isNaN(value) || value < 0 || value > 50) {
                error.textContent = 'Discount must be between 0 and 50';
            } else {
                error.textContent = '';
            }
        });
        
        expiryDateInput.addEventListener('input', function() {
            const error = document.getElementById('dateError');
            if (!this.value) {
                error.textContent = 'Please select an expiry date';
            } else {
                error.textContent = '';
            }
        });

        categoryList.addEventListener('change', function() {
            const error = document.getElementById('categoryError');
            const selectedCategories = document.querySelectorAll('input[name="selectedCategories"]:checked');
            if (selectedCategories.length === 0) {
                error.textContent = 'Please select at least one category';
            } else {
                error.textContent = '';
            }
            updateSelectedCategories();
        });

        searchInput.addEventListener('input', function(e) {
            const searchText = e.target.value.toLowerCase();
            const categoryLabels = categoryList.querySelectorAll('label');
            
            categoryLabels.forEach(label => {
                const text = label.textContent.toLowerCase();
                label.style.display = text.includes(searchText) ? '' : 'none';
            });
        });

        // Clear search
        clearButton.addEventListener('click', function() {
            searchInput.value = '';
            const categoryLabels = categoryList.querySelectorAll('label');
            categoryLabels.forEach(label => label.style.display = '');
        });

        // Update selected categories display
        function updateSelectedCategories() {
            selectedCategoriesDiv.innerHTML = '';
            const checkedBoxes = categoryList.querySelectorAll('input[type="checkbox"]:checked');
            
            checkedBoxes.forEach(checkbox => {
                const span = document.createElement('span');
                span.className = 'tag';
                span.textContent = checkbox.parentElement.textContent.trim();
                selectedCategoriesDiv.appendChild(span);
            });
        }

        // Form validation and submission
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const offerName = document.getElementById('offerName').value;
            const discountPercentage = document.getElementById('discountPercentage').value;
            const expiryDate = document.getElementById('expiryDate').value;
            const selectedCategories = Array.from(
                document.querySelectorAll('input[name="selectedCategories"]:checked')
            ).map(checkbox => checkbox.value);

            // Validation
            let isValid = true;

            if (!offerName || offerName.trim().length < 3) {
                document.getElementById('offerNameError').textContent = 'Offer name must be at least 3 characters long';
                isValid = false;
            }

            if (!discountPercentage || discountPercentage < 0 || discountPercentage > 50) {
                document.getElementById('discountError').textContent = 'Discount must be between 0 and 50';
                isValid = false;
            }

            if (!expiryDate) {
                document.getElementById('dateError').textContent = 'Please select an expiry date';
                isValid = false;
            }

            if (selectedCategories.length === 0) {
                document.getElementById('categoryError').textContent = 'Please select at least one category';
                isValid = false;
            }

            if (!isValid) return;

            try {
                const response = await fetch('/admin/createCategoryOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        offerName,
                        discountPercentage,
                        selectedCategories,
                        expiryDate
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message
                    }).then(() => {
                        window.location.href = '/admin/offerManagement';
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to create offer'
                });
            }
        });
    });
</script>

//this is the offer controller 
const Product = require("../../models/productModel");
const Offer = require("../../models/offerModel");
const Category = require("../../models/categoryModel");

//offer management page
const offerManagement=async(req,res)=>{
    try {
        const search=req.query.search || "";
        const page = parseInt(req.query.page) || 1;
        const limit = 7;
        const query={
            $or:[
                {offerName:{$regex:search,$options:'i'}},
                {offerType:{$regex:search,$options:'i'}},
            ]
        };

        const totalOffers = await Offer.countDocuments(query);
        const totalPages = Math.ceil(totalOffers / limit);

        const offers = await Offer.find(query)
            .populate('productIds', 'productName')
            .populate('categoryIds', 'categoryName')
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        const currentDate=new Date();
        const processedOffers = offers.map(offer=>{
            const isExpired = offer.expireDate < currentDate;
            return{
                ...offer._doc,
                status:isExpired?"Expired":offer.status,
                formattedExpiryDate:offer.expireDate.toISOString().split('T')[0]
            };
        });

        res.render("offerManagement", {
            offers: processedOffers,
            currentPage: page,
            totalPages: totalPages,
            search: search,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1
        });
    } catch (error) {
        console.error("Error in offer management:", error);
        res.redirect("/pageerror"); 
    }
}


//load product offer page 
const loadProductOffer=async(req,res)=>{
    try {
        const activeProducts=await Product.find({
            isBlocked:false,
        });
        res.render("productOffer",{products:activeProducts})
    } catch (error) {
        console.error("Error loading product offer page:", error);
        res.redirect("/pageerror");
    }
}

//create product offer
const createProductOffer = async(req,res)=>{
    try {
        const {offerName,discountPercentage,selectedProducts,expiryDate}=req.body;

        if(!offerName || !discountPercentage || !selectedProducts || !expiryDate){
            return res.status(400).json({success:false,message:"please fill all required fields"});
        }

        const discount=parseFloat(discountPercentage);
        if(isNaN(discount)|| discount <=0 || discount>50){
            return res.status(400).json({success:false,message:"Discount percentagemust be betweeen 0 and 50"})
        }

        const expiry=new Date(expiryDate);
        const now=new Date();
        if(expiry <= now){
            return res.status(400).json({success:false,message:"Expiry date must be in the future"});
        }

        const productIds=Array.isArray(selectedProducts)?selectedProducts:[selectedProducts];

        for(const productId of productIds){
            const product=await Product.findOne({_id:productId,isBlocked:false});
            if(!product){
               return res.status(404).json({success:false,message:`product not found or inactive:${productId}`});
            }

            const offer = new Offer({
                offerType: "Product",
                offerName: offerName,
                discount: discount,
                expireDate: expiry,
                productIds: productIds,
                status: 'Active'
            });

            await offer.save();
        }
        res.status(200).json({success: true,message: "Offers created successfully"});
    } catch (error) {
        console.error("Error creating offer:", error);
        res.status(500).json({success: false,message: "Failed to create offer. Please try again."});
    }
}

//load edit product offer
const loadEditProductOffer = async (req, res) => {
    try {
        const offerId = req.params.id;
        const offer = await Offer.findById(offerId).populate('productIds');
        
        if (!offer) {
            return res.redirect('/admin/offerManagement');
        }

        const activeProducts = await Product.find({
            isBlocked: false,
        });

        res.render('editProductOffer', {
            offer: offer,
            products: activeProducts
        });
    } catch (error) {
        console.error("Error loading edit product offer page:", error);
        res.redirect("/pageerror");
    }
};

//update product offer
const updateProductOffer = async (req, res) => {
    try {
        const offerId = req.params.id;
        const { offerName, discountPercentage, selectedProducts, expiryDate } = req.body;

        // Validation
        if (!offerName || !discountPercentage || !selectedProducts || !expiryDate) {
            return res.status(400).json({
                success: false,
                message: "Please fill all required fields"
            });
        }

        const discount = parseFloat(discountPercentage);
        if (isNaN(discount) || discount <= 0 || discount > 50) {
            return res.status(400).json({ success: false, message: "Discount percentage must be between 0 and 50" });
        }

        const expiry = new Date(expiryDate);
        const now = new Date();
        if (expiry <= now) {
            return res.status(400).json({ success: false, message: "Expiry date must be in the future" });
        }

        // Since we're only allowing one product in edit mode
        const productIds = Array.isArray(selectedProducts) ? selectedProducts : [selectedProducts];
        
        for (const productId of productIds) {
            const product = await Product.findOne({ _id: productId, isBlocked: false });
            if (!product) {
                return res.status(404).json({ success: false, message: `Product not found or inactive: ${productId}` });
            }
        }

        const updatedOffer = await Offer.findByIdAndUpdate(
            offerId,
            {
                offerName: offerName,
                discount: discount,
                expireDate: expiry,
                productIds: productIds,
                status: 'Active'
            },
            { new: true }
        );

        if (!updatedOffer) {
            return res.status(404).json({ success: false, message: "Offer not found" });
        }

        res.status(200).json({ success: true, message: "Offer updated successfully" });
    } catch (error) {
        console.error("Error updating product offer:", error);
        res.status(500).json({ success: false, message: "Failed to update offer" });
    }
};


//load category offer page
const loadCategoryOffer= async(req,res)=>{
    try {
        const activeCategories=await Category.find({
            isListed:true,
            _id:{
                $nin:await Offer.distinct("categoryId",{
                    status:"Active",
                    expireDate:{$gt:new Date()}
                })
            }
        });
        res.render("categoryOffer",{categories:activeCategories})
    } catch (error) {
        console.error("Error loading category offer page:", error);
        res.redirect("/pageerror");
    }
}

//createcategory controller 
const createCategoryOffer=async(req,res)=>{
    try {
        const {offerName,discountPercentage,selectedCategories,expiryDate}=req.body;

        if(!offerName || !discountPercentage || !selectedCategories || !expiryDate){
            return res.status(400).json({success:false,message:"Please fill all the reqired fields"})
        }

        const discount=parseFloat(discountPercentage);
        if(isNaN(discount) || discount<=0 || discount>50){
            return res.status(400).json({success:false,message:"Discount percentage muist be between 0 and 50"})
        }

        const expiry=new Date(expiryDate);
        const now=new Date()
        if(expiry <= now){
            return res.status(400).json({success:false,message:"Expiry date must be in the future"})
        }

        const categoryIds=Array.isArray(selectedCategories)?selectedCategories:[selectedCategories];

        for(const categoryId of categoryIds){
            const category=await Category.findOne({_id:categoryId,isListed:true});
            if(!category){
                return res.status(404).json({success:false,message:`Category not found or inactive: ${categoryId}`})
            }
            const existingOffer=await Offer.findOne({
                categoryId:categoryId,
                status:"Active",
                expireDate:{$gt:now}
            });

            if(existingOffer){
                return res.status(400).json({success:false,message:`Category ${category.name} already has an active offer`})
            }

            const offer=new Offer({
                categoryName:category.name,
                offerType:"Category",
                offerName:offerName,
                discount:discount,
                expireDate:expiry,
                categoryId:categoryId,
                status:"Active"
            });

            await offer.save();
        }

        res.status(200).json({success:true,message:"Category offers created successfully"});
    } catch (error) {
        console.error("Error creating category offer:", error);
        res.status(500).json({success:false,message:"Failed to create offer.Please try again."})
    }
}

module.exports={
    offerManagement,
    loadProductOffer,
    createProductOffer,
    loadEditProductOffer,
    updateProductOffer,
    loadCategoryOffer,
    createCategoryOffer,
}

//this is the admin route 
//offer managemet
admin_route.get('/offerManagement',adminAuth,offerController.offerManagement);

//product offer
admin_route.get('/productOffer',adminAuth,offerController.loadProductOffer);
admin_route.post('/createProductOffer', adminAuth, offerController.createProductOffer);
admin_route.get('/editProductOffer/:id', adminAuth, offerController.loadEditProductOffer);
admin_route.put('/updateProductOffer/:id', adminAuth, offerController.updateProductOffer);

//category offer
admin_route.get('/categoryOffer',adminAuth,offerController.loadCategoryOffer);
admin_route.post('/createCategoryOffer',adminAuth,offerController.createCategoryOffer);