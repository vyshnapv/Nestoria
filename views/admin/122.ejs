//this is my generatesales report
const generateSalesReport = async (req, res) => {
  try {
      const { startDate, endDate, reportType } = req.query;
      let dateQuery = {};
      let previousPeriodQuery = {};

      // All the date query logic remains the same
      if (reportType === 'daily') {
          const today = new Date();
          const yesterday = new Date(today);
          yesterday.setDate(yesterday.getDate() - 1);

          dateQuery = {
              createdAt: {
                  $gte: new Date(today.setHours(0, 0, 0, 0)),
                  $lt: new Date(today.setHours(23, 59, 59, 999))
              }
          };
          previousPeriodQuery = {
              createdAt: {
                  $gte: new Date(yesterday.setHours(0, 0, 0, 0)),
                  $lt: new Date(yesterday.setHours(23, 59, 59, 999))
              }
          };
      } else if (reportType === 'weekly') {
          const today = new Date();
          const weekStart = new Date(today);
          weekStart.setDate(today.getDate() - today.getDay());
          
          const previousWeekStart = new Date(weekStart);
          previousWeekStart.setDate(previousWeekStart.getDate() - 7);
          const previousWeekEnd = new Date(weekStart);
          previousWeekEnd.setSeconds(previousWeekEnd.getSeconds() - 1);

          dateQuery = {
              createdAt: {
                  $gte: new Date(weekStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(today.setHours(23, 59, 59, 999))
              }
          };
          previousPeriodQuery = {
              createdAt: {
                  $gte: new Date(previousWeekStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(previousWeekEnd)
              }
          };
      } else if (reportType === 'monthly') {
          const today = new Date();
          const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
          
          const previousMonthStart = new Date(today.getFullYear(), today.getMonth() - 1, 1);
          const previousMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);

          dateQuery = {
              createdAt: {
                  $gte: new Date(monthStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(today.setHours(23, 59, 59, 999))
              }
          };
          previousPeriodQuery = {
              createdAt: {
                  $gte: new Date(previousMonthStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(previousMonthEnd.setHours(23, 59, 59, 999))
              }
          };
      } else if (reportType === 'yearly') {
          const today = new Date();
          const yearStart = new Date(today.getFullYear(), 0, 1);
          
          const previousYearStart = new Date(today.getFullYear() - 1, 0, 1);
          const previousYearEnd = new Date(today.getFullYear(), 0, 0);

          dateQuery = {
              createdAt: {
                  $gte: new Date(yearStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(today.setHours(23, 59, 59, 999))
              }
          };
          previousPeriodQuery = {
              createdAt: {
                  $gte: new Date(previousYearStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(previousYearEnd.setHours(23, 59, 59, 999))
              }
          };
      } else if (reportType === 'custom' && startDate && endDate) {
          const start = new Date(startDate);
          const end = new Date(endDate);
          const daysDiff = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
          
          const previousStart = new Date(start);
          previousStart.setDate(previousStart.getDate() - daysDiff);
          const previousEnd = new Date(start);
          previousEnd.setSeconds(previousEnd.getSeconds() - 1);

          dateQuery = {
              createdAt: {
                  $gte: new Date(start.setHours(0, 0, 0, 0)),
                  $lt: new Date(end.setHours(23, 59, 59, 999))
              }
          };
          previousPeriodQuery = {
              createdAt: {
                  $gte: new Date(previousStart.setHours(0, 0, 0, 0)),
                  $lt: new Date(previousEnd)
              }
          };
      }

      const currentOrders = await Order.find(dateQuery)
          .populate('userId', 'name')
          .populate({
              path: 'items.productId',
              populate: {
                  path: 'category'
              }
          });

      const currentCustomers = await User.distinct('_id', {
          _id: { $in: currentOrders.map(order => order.userId) }
      });

      const previousOrders = await Order.find(previousPeriodQuery);
      const previousCustomers = await User.distinct('_id', {
          _id: { $in: previousOrders.map(order => order.userId) }
      });

      // Calculate revenues
      const currentRevenue = currentOrders.reduce((sum, order) =>
          sum + order.items.reduce((itemSum, item) => itemSum + item.finalPrice, 0), 0);
      const previousRevenue = previousOrders.reduce((sum, order) =>
          sum + order.items.reduce((itemSum, item) => itemSum + item.finalPrice, 0), 0);

      // Modified report generation to separate coupon discounts
      const report = currentOrders.map(order => {
        console.log('Order data:', {
          orderId: order.orderId,
          fullOrder: order,
          discountField: order.discount,
          // Log any other potential discount fields you might have
      });
          // Calculate only the coupon discount
          const couponDiscount = order.discount || 0;
          
          // Calculate total before any discounts
          const totalBeforeDiscount = order.items.reduce((sum, item) => 
              sum + (item.price * item.quantity), 0);
          
          // Calculate final amount including shipping but excluding coupon discount
          const totalAfterItemDiscounts = order.items.reduce((sum, item) => 
              sum + item.finalPrice, 0);
          
          const shippingCharge = 50;

          return {
              orderId: order.orderId,
              customerName: order.userId?.name || 'Unknown',
              date: order.createdAt.toLocaleDateString(),
              total: totalBeforeDiscount,
              discount: couponDiscount, // Only showing coupon discount
              shippingCharge: shippingCharge,
              finalAmount: totalAfterItemDiscounts - couponDiscount + shippingCharge
          };
      });

      // Calculate summary with only coupon discounts
      const summary = {
          totalOrders: currentOrders.length,
          totalAmount: report.reduce((sum, order) => sum + order.total, 0),
          totalDiscount: report.reduce((sum, order) => sum + order.discount, 0), // Only coupon discounts
          totalShipping: report.reduce((sum, order) => sum + order.shippingCharge, 0),
          finalTotal: report.reduce((sum, order) => sum + order.finalAmount, 0)
      };

      // Modified stats to include only coupon discounts
      const stats = {
          revenue: {
              current: currentRevenue,
              change: previousRevenue ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0
          },
          orders: {
              current: currentOrders.length,
              change: previousOrders.length ? 
                  ((currentOrders.length - previousOrders.length) / previousOrders.length) * 100 : 0
          },
          customers: {
              current: currentCustomers.length,
              change: previousCustomers.length ? 
                  ((currentCustomers.length - previousCustomers.length) / previousCustomers.length) * 100 : 0
          },
          discounts: {
              current: report.reduce((sum, order) => sum + order.discount, 0) // Only coupon discounts
          }
      };

      // Process product and category data
      const productSales = {};
      currentOrders.forEach(order => {
          order.items.forEach(item => {
              if (!productSales[item.productId._id]) {
                  productSales[item.productId._id] = {
                      name: item.productId.name,
                      unitsSold: 0,
                      revenue: 0
                  };
              }
              productSales[item.productId._id].unitsSold += item.quantity;
              productSales[item.productId._id].revenue += item.finalPrice;
          });
      });

      const topProducts = Object.values(productSales)
          .sort((a, b) => b.unitsSold - a.unitsSold)
          .slice(0, 10);

      const categorySales = {};
      let totalSales = 0;

      currentOrders.forEach(order => {
          order.items.forEach(item => {
              if (item.productId && item.productId.category) {
                  const categoryName = item.productId.category.name;
                  if (!categorySales[categoryName]) {
                      categorySales[categoryName] = 0;
                  }
                  categorySales[categoryName] += item.finalPrice;
                  totalSales += item.finalPrice;
              }
          });
      });

      const topCategories = Object.entries(categorySales)
          .map(([name, sales]) => ({
              name,
              sales,
              percentage: ((sales / totalSales) * 100).toFixed(1)
          }))
          .sort((a, b) => b.sales - a.sales)
          .slice(0, 9);

      // Handle downloads if requested
      if (req.query.download === 'excel') {
          return await downloadExcel(currentOrders, topProducts, topCategories, res);
      } else if (req.query.download === 'pdf') {
          return await downloadPDF(currentOrders, topProducts, topCategories, res);
      }

      // Send response
      res.json({
          success: true,
          stats,
          report,
          topProducts,
          topCategories,
          summary
      });

  } catch (error) {
      console.error('Error generating sales report:', error);
      res.status(500).json({ success: false, message: 'Error generating report' });
  }
};

// this is my coupon model
const mongoose = require('mongoose');

const couponSchema = mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    couponCode: {
        type: String,
        required: true,
        unique: true
    },
    description: {
        type: String
    },
    percentage: {
        type: Number,
        required: true,
        min: 1,
        max: 80
    },
    minPrice: {
        type: Number,
        default: 0
    },
    maxRedeemAmount: {
        type: Number,
    },
    addedDate: {
        type: Date,
        default: Date.now
    },
    expiryDate: {
        type: Date,
        required: true,
        index: {expires: 0}
    },
    status: {
        type: String,
        enum: ['Active', 'Inactive'],
        default: 'Active'
    }
});

module.exports = mongoose.model("Coupon",couponSchema);