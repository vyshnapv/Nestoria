//this is my admin controller page 

//admindashboard
const loadDashboard = async (req, res) => {
      try {
         
          res.render("dashboard");
      } catch (error) {
          res.redirect("/pageerror");
      }
  }
  
//orderlist
const loadOrdersList = async (req, res) => {
  try {
      const { search = '', page = 1 } = req.query;
      const limit = 5;
      const skip = (page - 1) * limit;

      const searchTerm = search.trim();

      const currentDate = new Date();
      const offers = await Offer.find({
          status: 'Active',
          expireDate: { $gt: currentDate }
      });

      let orders = [];
      let totalOrders = 0;

      if (searchTerm) {
          const matchingUsers = await User.find({
              name: { $regex: searchTerm, $options: 'i' }
          }).select('_id');

          const userIds = matchingUsers.map(user => user._id);

          const searchCriteria = {
              $or: [
                  { orderId: { $regex: searchTerm, $options: 'i' } },
                  { paymentMethod: { $regex: searchTerm, $options: 'i' } },
                  { paymentStatus: { $regex: searchTerm, $options: 'i' } },
                  { orderStatus: { $regex: searchTerm, $options: 'i' } },
                  { userId: { $in: userIds } }
              ]
          };

          totalOrders = await Order.countDocuments(searchCriteria);

          orders = await Order.find(searchCriteria)
              .sort({ createdAt: -1 })
              .skip(skip)
              .limit(limit)
              .lean();
      } else {
          totalOrders = await Order.countDocuments();
          orders = await Order.find()
              .sort({ createdAt: -1 })
              .skip(skip)
              .limit(limit)
              .lean();
      }

      const formattedOrders = await Promise.all(
          orders.map(async (order) => {
              const customerName = await getCustomerName(order.userId);
              let subtotal = 0;
              let activeItemsCount = 0;

              const itemsWithPricing = order.items.map(item => {
                  if (item.itemStatus !== 'Cancelled') {
                      activeItemsCount++;
                      
                      const productOffer = offers.find(offer =>
                          (offer.productIds?.includes(item.productId)) ||
                          (offer.categoryIds?.includes(item.category))
                      );

                      const priceAfterOffer = productOffer
                          ? item.price * (1 - productOffer.discount / 100)
                          : item.price;

                      const finalItemPrice = item.finalPrice || priceAfterOffer;
                      subtotal += finalItemPrice * item.quantity;

                      return {
                          ...item,
                          originalPrice: item.price,
                          finalPrice: finalItemPrice,
                          offerDiscount: productOffer ? productOffer.discount : 0
                      };
                  }
                  return item;
              });

              let finalTotal = subtotal;
              let couponDiscount = 0;
              if (order.appliedCoupon && activeItemsCount > 0) {
                  couponDiscount = (subtotal / order.totalPrice) * order.appliedCoupon.discountAmount;
                  finalTotal = subtotal - couponDiscount;
              }

              const highestDiscount = Math.max(
                  ...itemsWithPricing
                      .filter(item => item.offerDiscount)
                      .map(item => item.offerDiscount),
                  order.appliedCoupon ? (couponDiscount / subtotal * 100) : 0
              );

              const hasReturnRequest = order.items.some(item =>
                  item.returnStatus &&
                  ['Return Requested', 'Return Accepted'].includes(item.returnStatus)
              );

              return {
                  _id: order._id,
                  orderId: order.orderId,
                  orderDate: new Date(order.createdAt).toLocaleDateString('en-GB'),
                  customerName: customerName || "Unknown Customer",
                  subtotal: subtotal.toFixed(2),
                  couponDiscount: couponDiscount.toFixed(2),
                  totalPrice: finalTotal.toFixed(2),
                  originalPrice: order.totalPrice.toFixed(2),
                  highestDiscount: highestDiscount.toFixed(1),
                  appliedCoupon: order.appliedCoupon,
                  paymentMethod: order.paymentMethod,
                  orderStatus: order.orderStatus,
                  paymentStatus: order.paymentStatus,
                  hasReturnRequest: hasReturnRequest,
                  returnItems: order.items.filter(item =>
                      item.returnStatus &&
                      ['Return Requested', 'Return Accepted'].includes(item.returnStatus)
                  ).map(item => ({
                      ...item,
                      returnDisplayStatus: item.returnStatus === 'Return Accepted' ? 'Accepted' :
                          item.returnStatus === 'Return Rejected' ? 'Rejected' :
                              'Requested'
                  }))
              };
          })
      );

      const pagination = {
          totalPages: Math.ceil(totalOrders / limit),
          currentPage: Number(page),
          hasNextPage: Number(page) < Math.ceil(totalOrders / limit),
          hasPrevPage: Number(page) > 1,
          nextPage: Number(page) + 1,
          prevPage: Number(page) - 1,
          totalOrders: totalOrders,
          ordersPerPage: limit,
          startOrder: skip + 1,
          endOrder: Math.min(skip + limit, totalOrders)
      };

      res.render('orders', {
          orders: formattedOrders,
          pagination,
          search: searchTerm
      });
  } catch (error) {
      console.error('Error in loadOrdersList:', error);
      res.status(500).render('error', {
          message: 'An error occurred while fetching the orders list',
          error: process.env.NODE_ENV === 'development' ? error : {}
      });
  }
};

async function getCustomerName(userId) {
  try {
    const user = await User.findById(userId).select('name');
    return user ? user.name:'Unknown Customer';
  } catch (error) {
    console.error('Error fetching customer name:', error);
    return null;
  }
};


//orderdetails page 
const adminOrderDetails = async (req, res) => {
  try {
      const { orderId } = req.params;
      
      const currentDate = new Date();
      const offers = await Offer.find({
          status: 'Active',
          expireDate: { $gt: currentDate }
      });

      const order = await Order.findOne({ orderId })
          .populate({
              path: 'items.productId',
              model: 'Product',
              populate: {
                  path: 'category',
                  model: 'Category',
                  select: 'name'
              },
              select: 'productName category productImage isBlocked'
          });

      if (!order) {
          return res.status(404).render('error', {
              message: 'Order not found',
              error: { status: 404 }
          });
      }

      const customer = await User.findById(order.userId).select('name email phone');

      let activeSubtotal = 0;
      let activeItemsCount = 0;

      const processedItems = order.items.map(item => {
          const productOffer = offers.find(offer => 
              (offer.productIds?.includes(item.productId?._id)) ||
              (offer.categoryIds?.includes(item.productId?.category))
          );

          const highestDiscount = productOffer ? productOffer.discount : 0;
          const offerPrice = productOffer 
              ? item.price * (1 - productOffer.discount / 100)
              : item.price;
          
          const itemFinalPrice = productOffer 
              ? item.quantity * offerPrice 
              : item.finalPrice;

          if (item.itemStatus !== 'Cancelled') {
              activeSubtotal += itemFinalPrice;
              activeItemsCount++;
          }

          return {
              productId: item.productId?._id || '',
              productName: item.productId?.productName || 'Product Unavailable',
              category: item.productId?.category?.name || 'Uncategorized',
              image: item.productId?.productImage?.[0] 
                  ? `/uploads/cropped/${item.productId.productImage[0]}` 
                  : '/placeholder-image.jpg',
              quantity: item.quantity,
              price: item.price.toFixed(2),
              offerPrice: offerPrice.toFixed(2),
              highestDiscount,
              finalPrice: itemFinalPrice.toFixed(2),
              status: item.itemStatus,
              isAvailable: !item.productId?.isBlocked
          };
      });


      let finalTotal = activeSubtotal;
      let appliedCouponInfo = null;

      if (order.appliedCoupon && activeItemsCount > 0) {
          const proportionalDiscount = (activeSubtotal / order.totalPrice) * order.appliedCoupon.discountAmount;
          finalTotal = activeSubtotal - proportionalDiscount;

          appliedCouponInfo = {
              code: order.appliedCoupon.code,
              originalDiscount: order.appliedCoupon.discountAmount,
              appliedDiscount: proportionalDiscount.toFixed(2)
          };
      }

      const formattedOrder = {
          orderId: order.orderId,
          orderDate: new Date(order.createdAt).toLocaleDateString('en-GB'),
          paymentMethod: order.paymentMethod,
          paymentStatus: order.paymentStatus,
          customer: {
              name: customer?.name || 'Unknown Customer',
              email: customer?.email || 'N/A',
              phone: customer?.phone || 'N/A'
          },
          address: order.address,
          items: processedItems,
          subtotal: activeSubtotal.toFixed(2),
          appliedCoupon: appliedCouponInfo,
          finalTotal: finalTotal.toFixed(2)
      };

      res.render('adminOrderDetails', { order: formattedOrder });

  } catch (error) {
      console.error('Error in adminOrderDetails:', error);
      res.status(500).render('error', {
          message: 'An error occurred while fetching order details',
          error: process.env.NODE_ENV === 'development' ? error : {}
      });
  }
};

//this is my admin category controller 
const Category = require("../../models/categoryModel");


const categoryInfo=async(req,res)=>{
    try {
        const page=parseInt(req.query.page) || 1;
        const limit=4;
        const skip=(page-1)*limit;
         
        
        const categoryData=await Category.find({})
        .sort({createdAt:-1})
        .skip(skip)
        .limit(limit);

        const totalCategories=await Category.countDocuments();

        const totalPages=Math.ceil(totalCategories / limit);
        res.render("category",{
            cat:categoryData,
            currentPage:page,
            totalPages:totalPages,
            totalCategories:totalCategories
        })
           
    } catch (error) {
        console.error(error);
        res.status(500).render("error", { message: "Internal Server Error" });          
    }
}

//category add
const addCategory=async(req,res)=>{
    const {name,description}=req.body;
    try {
        const normalizedName=name.trim().toLowerCase();
        const existingCategory=await Category.findOne({ name: { $regex: new RegExp(`^${normalizedName}$`, 'i') } });

        if(existingCategory)
        {
            return res.status(400).json({error:"category already exist"})
        }
     
        const newCategory=new Category({
            name:normalizedName,
            description,
        })

        await newCategory.save();
        return res.json({message:"Category Added Successfully"})
        
    } catch (error) {
        console.error(error);
        
        return res.status(500).json({error:"Internal server error"})
    }
}

//list category
const listCategory=async(req,res)=>{
    try {
        let id=req.query.id;
        const result=await Category.updateOne({ _id: id }, { $set: { isListed: false } });

        if(!result){
            return res.json({message:"Category not found or already unlisted"})
        }
        res.json({message:"Product unlisted successfully"})
    } catch (error) {
        console.error(error);
        res.json({message:"Filed to unlist the product"})
    }
}


//unlist category
const unListCategory=async(req,res)=>{
    try {
        let id=req.query.id;
        const result=await Category.updateOne({ _id: id }, { $set: { isListed: true } }); 

        if(!result){
            return res.json({message:"Category not found or already listed"})
        }
        res.json({message:"Product listed successfully"})
    } catch (error) {
        console.error(error);
        res.json({message:"Filed to list the product"})
    }
}

//get edit category
const getEditCategory=async(req,res)=>{
    try {
        const id=req.query.id;
        const category=await Category.findOne({_id:id});
    res.render("editcategory", { category: category });
    } catch (error) {
        res.redirect("/pageerror");
    }
}

//category edit post
const editCategory=async(req,res)=>{
    try {
         const id=req.params.id;
         const {categoryName,description}=req.body;
        const normalizedName = categoryName.trim()

        const existingCategory = await Category.findOne({
            _id: { $ne: id },
            name: { $regex: new RegExp(`^${normalizedName}$`, 'i') }
          });

         if(existingCategory){
            return res.status(400).json({error:"Category exists,please choose another name"})
         }

         const updateCategory=await Category.findByIdAndUpdate(id,{
            name:normalizedName,
            description:description,
         },{new:true})
         
         if(updateCategory)
         {
            res.status(200).json({success:true})
         }
         else
         {
            res.status(404).json({error:"Category not found"})
         }
    } catch (error) {
        res.status(500).json({error:"Internal server error"})
    }
}

module.exports={
    categoryInfo,
    addCategory,
    listCategory,
    unListCategory,
    getEditCategory,
    editCategory,
}
//this is customer controller 
const User = require("../../models/userModel");

const customerInfo=async(req,res)=>{
    try {
        let search="";
        if(req.query.search)
            {
                search=req.query.search
            }  
         let page=1;
         if(req.query.page)
         {
            page=req.query.page
         }
        
         const limit=5
         
         const userData=await User.find({
            is_admin:false,
            $or:[
                {name:{$regex:".*"+search+".*",$options:"i"}}, 
                {email:{$regex:".*"+search+".*",$options:"i"}},
                {mobile:{$regex:".*"+search+".*", $options:'i'}},
            ],
         })

         .limit(limit*1)
         .skip((page-1)*limit)
         .exec();

         const count=await User.find({
            is_admin:false,
            $or:[
                {name:{$regex:".*"+search+".*",$options:"i"}},
                {email:{$regex:".*"+search+".*",$options:"i"}},
                {mobile:{$regex:".*"+search+".*", $options:'i'}},
            ],
         }).countDocuments();

         const totalPages = Math.ceil(count / limit);
     
         res.render("customer", {
            data: userData,
            totalPages: totalPages,
            currentPage: page,
            search:search
         });
    } catch (error) {
        console.error(error); 
        res.status(500).send("Internal Server Error");
    }
}

//customer blocked
const customerBlocked=async(req,res)=>{
    try {
        let id = req.query.id;
        const result=await User.updateOne({ _id: id }, { $set: { is_blocked: true } });

        if (!result) {
           
            return res.json({ message: "Product not found or already blocked." });
        }
        res.json({ message: "User has been blocked successfully." }); 
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Internal Server Error" });
    }
}

//customer unblocked
const customerunBlocked=async(req,res)=>{
    try {
        let id = req.query.id;
        const result=await User.updateOne({ _id: id }, { $set: { is_blocked: false } });
        if (!result) {
           
            return res.json({ message: "Product not found or already unblocked." });
        }
        res.json({ message: "User has been unblocked successfully." }); 
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Internal Server Error" }); 
    }
}



module.exports={
    customerInfo,
    customerBlocked,
    customerunBlocked,
}

//this is product controller 
const Product = require("../../models/productModel");
const User = require("../../models/userModel");
const Category = require("../../models/categoryModel");
const fs=require("fs")
const path=require("path")
const sharp=require("sharp")



const getProductAddPage=async(req,res)=>{
    try {
        const category=await Category.find({isListed:true})
        res.render("productadd",{
            category,
        })
    } catch (error) {
       
        res.redirect("/pageerror")
    }
}

const addProducts = async (req, res) => {
    try {
        const products = req.body;

        const productExists = await Product.findOne({
            productName: products.productName,
        });
            
        if (!productExists) {
            const images = [];
            if (req.files && req.files.length > 0) {
                const uploadsDir = path.join(__dirname, '..', '..', 'public', 'uploads');
                const croppedDir = path.join(__dirname, '..', '..', 'public', 'uploads', 'cropped');
                
                if (!fs.existsSync(uploadsDir)) {
                    fs.mkdirSync(uploadsDir, { recursive: true });
                }
                if (!fs.existsSync(croppedDir)) {
                    fs.mkdirSync(croppedDir, { recursive: true });
                }

                for (const file of req.files) {
                    try {
                        
                        const originalImagePath = path.join(uploadsDir, file.filename);
                        const resizedImagePath = path.join(croppedDir, file.filename);
                        
                        if (!fs.existsSync(originalImagePath)) {
                            console.error('Original image not found:', originalImagePath);
                            continue;
                        }

                        await sharp(file.path)
                            .resize(440, 440, {
                                fit: 'cover',
                                position: 'center'
                            })
                            .toFile(resizedImagePath);

                        images.push(file.filename);
                        
                        fs.unlink(file.path, (err) => {
                            if (err) console.error('Error deleting original file:', err);
                        });
                    } catch (err) {
                        console.error('Error processing image:', err);
                        continue;
                    }
                }
            }

            const categoryId = await Category.findOne({_id: products.category});
            
            if (!categoryId) {
                return res.status(400).json({ message: "Invalid category name" });
            }

            const newProduct = new Product({
                productName: products.productName,
                description: products.description,
                category: categoryId._id,
                regularPrice: products.regularPrice,
                createdOn: new Date(),
                quantity: products.quantity,
                productImage: images,
                status: 'Available',
            });

            await newProduct.save();
            return res.redirect("/admin/Products");
        } else {
            return res.status(400).json({ message: "Product already exists, please try with another name" });
        }
    } catch (error) {
        console.error("Error saving product:", error);
        return res.redirect("/admin/pageerror");
    }
};

//product list page
const getAllProducts=async(req,res)=>{
    try {
        const search=req.query.search || "";
        const page=parseInt(req.query.page) || 1;
        const limit=4;
        const skip=(page-1)*limit

        const productData=await Product.find({
            
            $or:[
                {productName:{$regex:new RegExp(".*"+search+".*","i")}},
            ],
        }).skip(skip).limit(limit).populate("category").exec()


        const count=await Product.find({
            $or:[
                {productName:{$regex:new RegExp(".*"+search+".*","i")}},
            ],
        }).countDocuments();

        const category=await Category.find({isListed:true});

        if(category)
        {
            res.render("products",{
                data:productData,
                currentPage:page,
                totalPages:Math.ceil(count/limit),
                cat:category,
                search: search,
            })
        }
        else{
            res.render("page-404");
        }
    } catch (error) {
        console.error(error);
        res.redirect("/pageerror")
    }
}


//block properties
const blockProduct=async(req,res)=>{
    try {
        let id=req.query.id;
        const result = await Product.updateOne({ _id: id }, { $set: { isBlocked: true } });
        
        if (!result) {
           
            return res.json({ message: "Product not found or already blocked." });
        }
        res.json({ message: "Product blocked successfully" });
    } catch (error) {
        console.error(error); 
        res.json({ message: "Failed to block the product" });
    }
}

//unblock category
const unblockProduct = async (req, res) => {
    try {
        let id=req.query.id;
        const result = await Product.updateOne({ _id: id }, { $set: { isBlocked: false } });
        
        if (!result) {
           
            return res.json({ message: "Product not found or already unblocked." });
        }
        res.json({ message: "Product unblocked successfully" });
    } catch (error) {
        console.error(error);
        res.json({ message: "Failed to unblock the product" });
    }
}

//edit product
const getEditProduct=async(req,res)=>{
    try {
        const id=req.query.id;
        const product=await Product.findOne({_id:id});
        const category=await Category.find({})

        res.render("editproduct",{
            product:product,
            cat:category,
        })
        
    } catch (error) {
      console.error('Error in getEditProduct:', error);
        res.redirect("/pageerror");
    }
}

//edit product
const editProduct = async (req, res) => {
    try {
        const id = req.params.id;
        const product = await Product.findById(id);
        const data = req.body;

        if (!product) {
            return res.status(404).json({ error: "Product not found" });
        }

        const existingProduct = await Product.findOne({
            productName: data.productName,
            _id: { $ne: id }
        });

        if (existingProduct) {
            return res.status(400).json({ error: "Product name already exists" });
        }

        const deletedImages = JSON.parse(data.deletedImages || '[]');
        let currentImages = product.productImage.filter(img => !deletedImages.includes(img));

        for (const filename of deletedImages) {
            const imagePath = path.join(__dirname, '..', '..', 'public', 'uploads', 'cropped', filename);
            try {
                if (fs.existsSync(imagePath)) {
                    fs.unlinkSync(imagePath);
                }
            } catch (err) {
                console.error('Error deleting image file:', err);
            }
        }

        if (req.files && req.files.length > 0) {
            const uploadsDir = path.join(__dirname, '..', '..', 'public', 'uploads');
            const croppedDir = path.join(__dirname, '..', '..', 'public', 'uploads', 'cropped');
            
            fs.mkdirSync(uploadsDir, { recursive: true });
            fs.mkdirSync(croppedDir, { recursive: true });

            for (const file of req.files) {
                try {
                    const resizedImagePath = path.join(croppedDir, file.filename);
                    
                    await sharp(file.path)
                        .resize(440, 440, {
                            fit: 'cover',
                            position: 'center'
                        })
                        .toFile(resizedImagePath);

                    currentImages.push(file.filename);
                    
                    fs.unlinkSync(file.path);
                } catch (err) {
                    console.error('Error processing new image:', err);
                }
            }
        }

        const updatedProduct = await Product.findByIdAndUpdate(
            id,
            {
                productName: data.productName,
                description: data.description,
                regularPrice: data.regularPrice,
                quantity: data.quantity,
                category: data.category,
                productImage: currentImages,
                updatedAt: new Date()
            },
            { new: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "Failed to update product" });
        }

        res.redirect("/admin/products");

    } catch (error) {
        console.error('Error in editProduct:', error);
        res.status(500).redirect("/pageerror");
    }
};

module.exports={
    getProductAddPage,
    addProducts,
    getAllProducts,
    blockProduct,
    unblockProduct,
    getEditProduct,
    editProduct,
}