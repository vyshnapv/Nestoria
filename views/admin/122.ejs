//this is my order details page 
<%- include('../layoutsUser/userheader') %>
<style>

body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
}

.order-detail-heading {
    margin-top: 30px;
    font-weight: bold;
    font-size: 2.5rem; 
    text-align: center; 
}

.order-detail-date {
    font-size: 0.9rem;
    text-align: center; 
}

.order-detail-section-title {
    font-size: 1rem;
    font-weight: bold;
    color: #6c757d;
    margin-top: 1rem;
}

.order-detail-container {
    background-color: #ffffff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.order-detail-text {
    margin: 0;
    color: #333;
}

.order-detail-section {
    padding-top: 10px;
}

.order-detail-table-responsive {
    margin-top: 20px;
}

.order-detail-table {
    background-color: #ffffff;
}

.order-detail-table-header {
    background-color: #f1f1f1;
    font-weight: bold;
    text-align: center;
}

.order-detail-table-bordered th, .order-detail-table-bordered td {
    border: 1px solid #dee2e6;
    vertical-align: middle;
    text-align: center;
}

.order-detail-product-image {
    max-width: 50px;
    height: auto;
}

.order-detail-btn-cancel {
    font-size: 1rem;
   
    color: #fff;
    background-color: #dc3545;
    border: none;
}

.order-detail-btn-cancel:hover {
    background-color: #c82333;
}

.order-detail-summary-title {
    color: #495057;
}

.order-detail-summary-text {
    font-size: 0.9rem;
    color: #495057;
}
.modal-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
}

.modal-footer {
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
}

.form-label {
    font-weight: 500;
    color: #495057;
}

.form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.btn-danger {
    background-color: #dc3545;
}

.btn-danger:hover {
    background-color: #c82333;
}

.btn-loading {
    position: relative;
    pointer-events: none;
    opacity: 0.65;
}

.btn-loading:after {
    content: '';
    width: 1rem;
    height: 1rem;
    margin-left: 0.5rem;
    display: inline-block;
    vertical-align: text-bottom;
    border: 0.2em solid currentColor;
    border-right-color: transparent;
    border-radius: 50%;
    animation: spinner-border .75s linear infinite;
}

.original-price {
    text-decoration: line-through;
    color: #999;
    margin-right: 8px;
    font-size: 0.9em;
}

.offer-price {
    color: #000;
    font-weight: bold;
}

.discount-badge {
    background-color: #28a745;
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.8em;
    margin-left: 8px;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.summary-item.total {
    border-top: 1px solid #ddd;
    margin-top: 12px;
    padding-top: 12px;
    font-weight: bold;
}
.original-price {
    font-size: 0.9em;
    color: #6c757d;
}

.offer-price {
    font-weight: bold;
}

.discount-badge {
    font-size: 0.8em;
    padding: 2px 6px;
}
del {
        text-decoration: line-through;
    }
    .badge {
        font-size: 0.75rem;
        padding: 0.25em 0.5em;
    }
    .retry-payment-btn {
        background-color: #28a745;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9em;
        margin-top: 8px;
        display: inline-block;
        text-decoration: none;
    }
    
    .retry-payment-btn:hover {
        background-color: #218838;
    }

</style>
<h5 class="order-detail-heading">Order Details</h5>
<div class="order-detail-container mt-5">
    
    <div class="row">
        <div class="col-12">
            
            <p class="order-detail-date">Ordered on <%= order.orderDate %> | Order ID: <%= order.orderId %></p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 order-detail-section">
            <h6 class="order-detail-section-title">Shipping Address</h6>
            <p class="order-detail-text">
                <%= order.address.name %><br>
                +91 <%= order.address.phone %><br>
                <%= order.address.house %><br>
                <%= order.address.district %><br>
                <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %>
            </p>
        </div>
        <div class="col-md-4 order-detail-section">
            <h6 class="order-detail-section-title">Payment Method</h6>
            <p class="order-detail-text"><%= order.paymentMethod %></p>
        </div>
        <div class="col-md-4 order-detail-section">
            <h6 class="order-detail-section-title">Payment Status</h6>
            <p class="order-detail-text"><%= order.paymentStatus %></p>
            <% if (order.paymentStatus === 'Failed' && order.paymentMethod === 'Razorpay') { %>
                <button onclick="retryPayment('<%= order.orderId %>', '<%= order.totalPrice %>')" class="retry-payment-btn">
                    Try Payment Again
                </button>
            <% } %>
        </div>
    </div>
    
    <div class="order-detail-table-responsive">
        <table class="table order-detail-table order-detail-table-bordered">
            <thead class="order-detail-table-header">
                <tr>
                    <th>Product Name</th>
                    <th>Category</th>
                    <th>Image</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>
                        Final Price <br>
                        (include coupon)
                    </th>
                    <th>Order Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% order.items.forEach(item => { %>
                <tr>
                    <td><%= item.productName %></td>
                    <td><%= item.category.name %></td>
                    <td><img src="/uploads/cropped/<%= item.image %>"  alt="<%= item.productName %>" class="order-detail-product-image"></td>
                    <td><%= item.quantity %></td>
                    <td>
                        <% if (item.offerPrice && item.offerPrice < item.price) { %>
                            <div>
                                <del class="text-muted">₹<%= item.price.toFixed(2) %></del>
                            </div>
                            <div>
                                <strong class="text-success">₹<%= Math.round(item.offerPrice).toFixed(2) %></strong>
                                <small class="badge bg-success ms-1"><%= Math.round(((item.price - item.offerPrice) / item.price) * 100) %>% OFF</small>
                            </div>
                        <% } else { %>
                            <div>₹<%= item.price.toFixed(2) %></div>
                        <% } %>
                    </td>
                    <td>₹<%= Math.round(item.finalPrice.toFixed(2) )%></td>
                    <td><%= item.itemStatus %></td>
                    <td>
                        <% if (item.itemStatus === 'Ordered') { %>
                            <button class="btn btn-sm order-detail-btn-cancel" 
                               onclick="cancelOrderItem('<%= order.orderId %>', '<%= item.productName %>')">
                               ✖ Cancel
                            </button>
                        <% } else if (order.orderStatus === 'Delivered' && item.itemStatus !== 'Returned' && item.itemStatus !== 'Cancelled') { %>
                            <% if (item.itemStatus === 'Delivered') { %>
                                <button class="btn btn-sm order-detail-btn-return" 
                                   onclick="returnOrderItem('<%= order.orderId %>', '<%= item.productName %>')">
                                   ↩ Return
                                </button>
                            <% } else if (item.returnStatus === 'Return Requested') { %>
                                <span class="text-warning">Return Requested</span>
                            <% } else if (item.returnStatus === 'Return Accepted') { %>
                                <span class="text-success">Return Accepted</span>
                            <% } else if (item.returnStatus === 'Return Rejected') { %>
                                <span class="text-danger">Return Rejected</span>
                            <% } %>
                        <% } else { %>
                            <%= item.itemStatus %>
                        <% } %>
                    </td>
                </tr>
                <% }); %>
            </tbody>
        </table>
    </div>
    <div class="row mt-4">
        <div class="col-md-6 offset-md-6">
            <div class="order-detail-summary">
                <h6 class="order-detail-summary-title">Order Summary</h6>
                <div class="summary-item">
                    <span>Original Total:</span>
                    <span>₹<%= order.items.reduce((total, item) => 
                        total + (item.itemStatus !== 'Cancelled' ? item.price * item.quantity : 0), 0).toFixed(2) %>
                    </span>
                </div>
                <% if (order.items.some(item => item.highestDiscount > 0)) { %>
                    <div class="summary-item">
                        <span>Offer Discount:</span>
                        <span class="text-success">-₹<%= order.items.reduce((total, item) => {
                            if (item.itemStatus !== 'Cancelled' && item.highestDiscount > 0) {
                                return total + ((item.price - item.offerPrice) * item.quantity);
                            }
                            return total;
                        }, 0).toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="summary-item">
                    <span>Subtotal:(include coupon)</span>
                    <span>₹<%= order.items.reduce((total, item) => total + (item.itemStatus !== 'Cancelled' ? item.finalPrice : 0), 0).toFixed(2) %></span>
                </div>
                <div class="summary-item">
                    <span>shipping Charge:</span>
                    <span>₹50</span>
                </div>
                <% if (order.appliedCoupon) { %>
                    <div class="summary-item">
                        <span>Coupon Discount (<%= order.appliedCoupon.code %>):</span>
                        <span class="text-success">-₹<%= order.appliedCoupon.discountAmount.toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="summary-item total">
                    <span>Total Amount(include shipping):</span>
                    <span>₹<%= order.totalPrice.toFixed(2) %></span>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="cancelOrderModal" tabindex="-1" role="dialog" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order Item</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="cancelOrderForm">
                    <div class="form-group mb-3">
                        <label for="cancelReason" class="form-label">Reason for Cancellation</label>
                        <select class="form-control" id="cancelReason" required>
                            <option value="" disabled selected>Select a reason</option>
                            <option value="Changed my mind">Changed my mind</option>
                            <option value="Ordered wrong product">Ordered wrong product</option>
                            <option value="Found better price elsewhere">Found better price elsewhere</option>
                            <option value="Shipping time too long">Shipping time too long</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Payment issues">Payment issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group mb-3 d-none" id="otherReasonDiv">
                        <label for="otherReason" class="form-label">Please specify other reason</label>
                        <textarea class="form-control" id="otherReason" rows="3"></textarea>
                    </div>
                    <input type="hidden" id="cancelOrderId">
                    <input type="hidden" id="cancelProductName">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="confirmCancelOrder">Cancel Item</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="returnOrderModal" tabindex="-1" role="dialog" aria-labelledby="returnOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnOrderModalLabel">Return Order Item</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="returnOrderForm">
                    <div class="form-group mb-3">
                        <label for="returnReason" class="form-label">Reason for Return</label>
                        <select class="form-control" id="returnReason" required>
                            <option value="" disabled selected>Select a reason</option>
                            <option value="Defective Product">Defective Product</option>
                            <option value="Wrong Product">Wrong Product</option>
                            <option value="Not Satisfied">Not Satisfied</option>
                            <option value="Size/Fit Issues">Size/Fit Issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group mb-3 d-none" id="otherReasonDiv">
                        <label for="otherReason" class="form-label">Please specify other reason</label>
                        <textarea class="form-control" id="otherReason" rows="3"></textarea>
                    </div>
                    <input type="hidden" id="returnOrderId">
                    <input type="hidden" id="returnProductName">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="confirmReturnOrder">Return Item</button>
            </div>
        </div>
    </div>
</div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <%- include('../layoutsUser/userfooter') %>

<script>

async function retryPayment(orderId, amount) {
    try {
        const response = await fetch(`/create-razorpay-order`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: orderId,
                amount: amount
            })
        });

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }

        const options = {
            key: data.key,
            amount: data.amount,
            currency: data.currency,
            name: "Your Store Name",
            description: "Order Payment",
            order_id: data.orderId,
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature
                        })
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Your payment has been processed successfully!',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(verifyData.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: error.message || 'Failed to verify payment'
                    });
                }
            },
            prefill: {
                name: "<%= order.address.name %>",
                contact: "<%= order.address.phone %>"
            },
            theme: {
                color: "#3399cc"
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

        rzp.on('payment.failed', function (response) {
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: 'The payment process failed. Please try again.'
            });
        });

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to initiate payment'
        });
    }
}

document.getElementById('cancelReason').addEventListener('change', function() {
    const otherReasonDiv = document.getElementById('otherReasonDiv');
    if (this.value === 'Other') {
        otherReasonDiv.classList.remove('d-none');
    } else {
        otherReasonDiv.classList.add('d-none');
    }
});


function cancelOrderItem(orderId, productName) {
    document.getElementById('cancelOrderId').value = orderId;
    document.getElementById('cancelProductName').value = productName;
    
    document.getElementById('cancelReason').value = '';
    document.getElementById('otherReason').value = '';
    document.getElementById('otherReasonDiv').classList.add('d-none');

    const modal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
    modal.show();
}


document.getElementById('confirmCancelOrder').addEventListener('click', async function() {
    const button = this;
    const orderId = document.getElementById('cancelOrderId').value;
    const productName = document.getElementById('cancelProductName').value;
    const reasonSelect = document.getElementById('cancelReason');
    
    if (!reasonSelect.value) {
        Swal.fire({
            icon: 'warning',
            title: 'Required',
            text: 'Please select a reason for cancellation'
        });
        return;
    }
    
    const reason = reasonSelect.value === 'Other' 
        ? document.getElementById('otherReason').value.trim()
        : reasonSelect.value;
        
    if (reasonSelect.value === 'Other' && !reason) {
        Swal.fire({
            icon: 'warning',
            title: 'Required',
            text: 'Please specify the other reason'
        });
        return;
    }

    try {
       
        button.classList.add('btn-loading');
        button.disabled = true;

        const response = await fetch(`/orderDetails/${orderId}/cancel-item`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productName: productName,
                reason: reason
            })
        });

        const data = await response.json();
        
        
        button.classList.remove('btn-loading');
        button.disabled = false;
        
        if (data.success) {
            const orderSummaryElement = document.querySelector('.order-detail-summary-text');
            if (orderSummaryElement && data.updatedTotalPrice !== undefined) {
                orderSummaryElement.textContent = `Total Amount: ₹${data.updatedTotalPrice.toFixed(2)}`;
            }
            
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Order item cancelled successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to cancel order item'
            });
        }
    } catch (error) {
        button.classList.remove('btn-loading');
        button.disabled = false;
        
        console.error('Error cancelling order item:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while cancelling the order item'
        });
    }
});

document.addEventListener('DOMContentLoaded', function() {
    if (!document.getElementById('cancelOrderModal')) {
        console.error('Cancel order modal element not found');
    }
});

document.getElementById('returnReason').addEventListener('change', function() {
    const otherReasonDiv = document.getElementById('otherReasonDiv');
    if (this.value === 'Other') {
        otherReasonDiv.classList.remove('d-none');
    } else {
        otherReasonDiv.classList.add('d-none');
    }
});

function returnOrderItem(orderId, productName) {
    document.getElementById('returnOrderId').value = orderId;
    document.getElementById('returnProductName').value = productName;
    
    document.getElementById('returnReason').value = '';
    document.getElementById('otherReason').value = '';
    document.getElementById('otherReasonDiv').classList.add('d-none');

    const modal = new bootstrap.Modal(document.getElementById('returnOrderModal'));
    modal.show();
}

document.getElementById('confirmReturnOrder').addEventListener('click', async function() {
    const button = this;
    const orderId = document.getElementById('returnOrderId').value;
    const productName = document.getElementById('returnProductName').value;
    const reasonSelect = document.getElementById('returnReason');
    
    if (!reasonSelect.value) {
        Swal.fire({
            icon: 'warning',
            title: 'Required',
            text: 'Please select a reason for return'
        });
        return;
    }
    
    const reason = reasonSelect.value === 'Other' 
        ? document.getElementById('otherReason').value.trim()
        : reasonSelect.value;
        
    if (reasonSelect.value === 'Other' && !reason) {
        Swal.fire({
            icon: 'warning',
            title: 'Required',
            text: 'Please specify the other reason'
        });
        return;
    }

    try {
        button.classList.add('btn-loading');
        button.disabled = true;

        const response = await fetch(`/orderDetails/${orderId}/return-item`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productName: productName,
                reason: reason
            })
        });

        const data = await response.json();
        
        button.classList.remove('btn-loading');
        button.disabled = false;
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Return Requested',
                text: 'Your return request has been submitted. Our team will review it soon.',
                showConfirmButton: false,
                timer: 2500
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to submit return request'
            });
        }
    } catch (error) {
        button.classList.remove('btn-loading');
        button.disabled = false;
        
        console.error('Error submitting return request:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while submitting the return request'
        });
    }
});

</script>
//this is my order controler 
